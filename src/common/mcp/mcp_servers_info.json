{
  "summary": {
    "collection_timestamp": "2025-09-14T16:18:05.219858",
    "total_servers": 28,
    "successful_connections": 28,
    "failed_connections": 0,
    "total_tools_discovered": 257,
    "batch_size": 5,
    "total_batches": 6,
    "connection_mode": "individual",
    "retry_statistics": {
      "servers_needed_retry": 0,
      "total_retry_attempts": 0
    },
    "servers_needed_retry": [],
    "failed_servers": []
  },
  "servers": {
    "OpenAPI Explorer": {
      "name": "OpenAPI Explorer",
      "icon": "",
      "description": "",
      "command": [
        "node",
        "index.js",
        "run"
      ],
      "connection_status": "success",
      "tools": {
        "getApiOverview": {
          "name": "getApiOverview",
          "description": "Get an overview of an OpenAPI specification. This should be the first step when working with any API.\n\n- openai - OpenAI is a large AI service provider providing state of the art models in various modalities.\n- github - GitHub is where one hosts their code in a central location, to collaborate with others\n- socialdata.tools\n- podscan.fm - Search through podcast transcripts, get alerts\n- x - Official Twitter/X API\n- cloudflare - Cloudflare provides content delivery network services, cloud cybersecurity, DDoS mitigation, wide area network services, Domain Name Service, and ICANN-accredited domain registration services\n- npm-registry\n- supabase - Create hosted Postgres Databases with API\n- hackernews - Readonly API for posts, comments, and profiles from news.ycombinator.com\n- stripe - Create a paywall for your app or invoices\n- slack - A very common app used for communication at work\n- vercel - Vercel is a cloud hosting solution for full stack applications\n- val-town - Host serverless APIs\n- firecrawl - API for interacting with Firecrawl services to perform web scraping and crawling tasks.\n- playht - The PlayHT's API API allows developers to Realtime Text to Speech streaming Stream audio bytes from text, Convert long form Text to Speech Generate audio from text, and Voice Cloning Instant Cloning.\n- serper - The worlds fastest and cheapest google search api\n- replicate\n- brandwatch - Watch social media about your brand\n- jina-reader - Read webpages in markdown, html, or screenshot\n- upstash-redis - Control a Redis database over API\n- upstash-qstash - Scheduling and batching API calls\n- upstash-vector - Control a Vector database over API\n- digitalocean\n- apisguru - Public API to find OpenAPIs on https://apis.guru\n- groq - Cloud AI Provider with multiple transformer LLMs and other modalities, with very fast inference\n- notion-dbs - Notion Databases API\n- posthog-capture-api - Posthog is a Product analytics platform allowing companies to track and understand their users\n- google-analytics4 - The Google Analytics Admin API allows for programmatic access to the Google Analytics 4 (GA4) configuration data and is only compatible with GA4 properties\n- google-analytics3 - Views and manages your Google Analytics data (GA3)\n- anthropic-message-api\n- probo-nl\n- whatsapp-business - The WhatsApp Business Platform gives medium to large businesses the ability to connect with customers at scale. You can start WhatsApp conversations with your customers in minutes, send them care notifications or purchase updates, offer personalized services, and provide support in the channel that your customers prefer.\n- shopify - Shopify Admin API\n- twilio-messaging\n- huggingface\n- doppio\n- multion\n- browserless - Web browsing API\n- bol-com-retailer - Dutch shopping platform\n- statusbrew - Social media planning API for facebook, instagram, twitter, linkedin, google my business, pinterest, youtube, and tiktok.\n- swagger-validator - Validators for swagger 2.0 and 3.x specifications of OpenAPIs\n- google-mail - Manage GMail\n- youtube-data - The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.\n- google-sheets\n- google-drive\n- google-secret-manager\n- flyio\n- vapi\n- klippa\n- uberduck\n- twilio\n- saltedge - Bank integrations\n- google-search-console\n- aws-cloudwatch-insights\n- aws-cloudfront\n- aws-email\n- aws-s3-control\n- aws-s3\n- aws-sagemaker\n- aws-sagemaker-edge\n- aws-sagemaker-featureStore\n- bunq\n- hootsuite\n- robocorp\n- sendgrid\n- google-calendar\n- google-docs",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "API identifier, can be a known ID from openapisearch.com or a URL leading to a raw OpenAPI file"
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "getApiOperation": {
          "name": "getApiOperation",
          "description": "Get details about a specific operation from an OpenAPI specification. Use this after getting an overview.\n\n- openai - OpenAI is a large AI service provider providing state of the art models in various modalities.\n- github - GitHub is where one hosts their code in a central location, to collaborate with others\n- socialdata.tools\n- podscan.fm - Search through podcast transcripts, get alerts\n- x - Official Twitter/X API\n- cloudflare - Cloudflare provides content delivery network services, cloud cybersecurity, DDoS mitigation, wide area network services, Domain Name Service, and ICANN-accredited domain registration services\n- npm-registry\n- supabase - Create hosted Postgres Databases with API\n- hackernews - Readonly API for posts, comments, and profiles from news.ycombinator.com\n- stripe - Create a paywall for your app or invoices\n- slack - A very common app used for communication at work\n- vercel - Vercel is a cloud hosting solution for full stack applications\n- val-town - Host serverless APIs\n- firecrawl - API for interacting with Firecrawl services to perform web scraping and crawling tasks.\n- playht - The PlayHT's API API allows developers to Realtime Text to Speech streaming Stream audio bytes from text, Convert long form Text to Speech Generate audio from text, and Voice Cloning Instant Cloning.\n- serper - The worlds fastest and cheapest google search api\n- replicate\n- brandwatch - Watch social media about your brand\n- jina-reader - Read webpages in markdown, html, or screenshot\n- upstash-redis - Control a Redis database over API\n- upstash-qstash - Scheduling and batching API calls\n- upstash-vector - Control a Vector database over API\n- digitalocean\n- apisguru - Public API to find OpenAPIs on https://apis.guru\n- groq - Cloud AI Provider with multiple transformer LLMs and other modalities, with very fast inference\n- notion-dbs - Notion Databases API\n- posthog-capture-api - Posthog is a Product analytics platform allowing companies to track and understand their users\n- google-analytics4 - The Google Analytics Admin API allows for programmatic access to the Google Analytics 4 (GA4) configuration data and is only compatible with GA4 properties\n- google-analytics3 - Views and manages your Google Analytics data (GA3)\n- anthropic-message-api\n- probo-nl\n- whatsapp-business - The WhatsApp Business Platform gives medium to large businesses the ability to connect with customers at scale. You can start WhatsApp conversations with your customers in minutes, send them care notifications or purchase updates, offer personalized services, and provide support in the channel that your customers prefer.\n- shopify - Shopify Admin API\n- twilio-messaging\n- huggingface\n- doppio\n- multion\n- browserless - Web browsing API\n- bol-com-retailer - Dutch shopping platform\n- statusbrew - Social media planning API for facebook, instagram, twitter, linkedin, google my business, pinterest, youtube, and tiktok.\n- swagger-validator - Validators for swagger 2.0 and 3.x specifications of OpenAPIs\n- google-mail - Manage GMail\n- youtube-data - The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.\n- google-sheets\n- google-drive\n- google-secret-manager\n- flyio\n- vapi\n- klippa\n- uberduck\n- twilio\n- saltedge - Bank integrations\n- google-search-console\n- aws-cloudwatch-insights\n- aws-cloudfront\n- aws-email\n- aws-s3-control\n- aws-s3\n- aws-sagemaker\n- aws-sagemaker-edge\n- aws-sagemaker-featureStore\n- bunq\n- hootsuite\n- robocorp\n- sendgrid\n- google-calendar\n- google-docs",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "API identifier, can be a known ID from openapisearch.com or a URL leading to a raw OpenAPI file"
              },
              "operationIdOrRoute": {
                "type": "string",
                "description": "Operation ID or route path to retrieve"
              }
            },
            "required": [
              "id",
              "operationIdOrRoute"
            ]
          }
        }
      },
      "attempts": 1
    },
    "Unit Converter": {
      "name": "Unit Converter",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "-m",
        "unit_converter_mcp.server"
      ],
      "connection_status": "success",
      "tools": {
        "convert_temperature": {
          "name": "convert_temperature",
          "description": "Convert temperature between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Temperature value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "celsius",
                  "fahrenheit",
                  "kelvin"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "celsius",
                  "fahrenheit",
                  "kelvin"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_angle": {
          "name": "convert_angle",
          "description": "Convert angle between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Angle value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "degrees",
                  "radians",
                  "arcmin",
                  "arcsec",
                  "turns",
                  "gons"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "degrees",
                  "radians",
                  "arcmin",
                  "arcsec",
                  "turns",
                  "gons"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_length": {
          "name": "convert_length",
          "description": "Convert length between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Length value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "angstrom",
                  "astronomical unit",
                  "cable",
                  "centimeter",
                  "chain (surveyors)",
                  "decimeter",
                  "em (pica)",
                  "fathom",
                  "foot",
                  "foot (US survey)",
                  "furlong",
                  "hand",
                  "hectometer",
                  "inch",
                  "kilometer",
                  "light year",
                  "meter",
                  "micrometer",
                  "mil",
                  "mile",
                  "nautical mile",
                  "nautical mile (UK)",
                  "millimeter",
                  "nanometer",
                  "parsec",
                  "picometer",
                  "Scandinavian mile",
                  "thou",
                  "yard"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "angstrom",
                  "astronomical unit",
                  "cable",
                  "centimeter",
                  "chain (surveyors)",
                  "decimeter",
                  "em (pica)",
                  "fathom",
                  "foot",
                  "foot (US survey)",
                  "furlong",
                  "hand",
                  "hectometer",
                  "inch",
                  "kilometer",
                  "light year",
                  "meter",
                  "micrometer",
                  "mil",
                  "mile",
                  "nautical mile",
                  "nautical mile (UK)",
                  "millimeter",
                  "nanometer",
                  "parsec",
                  "picometer",
                  "Scandinavian mile",
                  "thou",
                  "yard"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_energy": {
          "name": "convert_energy",
          "description": "Convert energy between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Energy value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "joule",
                  "kilojoule",
                  "megajoule",
                  "gigajoule",
                  "terajoule",
                  "petajoule",
                  "exajoule",
                  "watt hour",
                  "kilowatt hour",
                  "megawatt hour",
                  "gigawatt hour",
                  "terawatt hour",
                  "Btu",
                  "calorie",
                  "kilocalorie",
                  "therm",
                  "foot‑pound force",
                  "inch‑pound force",
                  "erg",
                  "electron volt"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "joule",
                  "kilojoule",
                  "megajoule",
                  "gigajoule",
                  "terajoule",
                  "petajoule",
                  "exajoule",
                  "watt hour",
                  "kilowatt hour",
                  "megawatt hour",
                  "gigawatt hour",
                  "terawatt hour",
                  "Btu",
                  "calorie",
                  "kilocalorie",
                  "therm",
                  "foot‑pound force",
                  "inch‑pound force",
                  "erg",
                  "electron volt"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_force": {
          "name": "convert_force",
          "description": "Convert force between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Force value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "dynes",
                  "kilograms force",
                  "kilonewtons",
                  "kips",
                  "meganewtons",
                  "newtons",
                  "pounds force",
                  "tonnes force",
                  "long tons force",
                  "short tons force"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "dynes",
                  "kilograms force",
                  "kilonewtons",
                  "kips",
                  "meganewtons",
                  "newtons",
                  "pounds force",
                  "tonnes force",
                  "long tons force",
                  "short tons force"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_pressure": {
          "name": "convert_pressure",
          "description": "Convert pressure between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Pressure value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "pascal",
                  "hectopascal",
                  "kilopascal",
                  "megapascal",
                  "bar",
                  "atmosphere",
                  "centimeters of water",
                  "inches of water",
                  "feet of water",
                  "meters of water",
                  "millimeters of mercury",
                  "inches of mercury",
                  "kilogram force per square centimeter",
                  "newtons per square centimeter",
                  "newtons per square millimeter",
                  "psi",
                  "psf"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "pascal",
                  "hectopascal",
                  "kilopascal",
                  "megapascal",
                  "bar",
                  "atmosphere",
                  "centimeters of water",
                  "inches of water",
                  "feet of water",
                  "meters of water",
                  "millimeters of mercury",
                  "inches of mercury",
                  "kilogram force per square centimeter",
                  "newtons per square centimeter",
                  "newtons per square millimeter",
                  "psi",
                  "psf"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_power": {
          "name": "convert_power",
          "description": "Convert power between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Power value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "Btu per hour",
                  "foot pound‑force per second",
                  "ton of refrigeration",
                  "calorie per hour",
                  "kilocalorie per hour",
                  "horsepower",
                  "horsepower (metric)",
                  "kilogram‑force meter per second",
                  "watt",
                  "kilowatt",
                  "megawatt",
                  "gigawatt",
                  "terawatt",
                  "petawatt"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "Btu per hour",
                  "foot pound‑force per second",
                  "ton of refrigeration",
                  "calorie per hour",
                  "kilocalorie per hour",
                  "horsepower",
                  "horsepower (metric)",
                  "kilogram‑force meter per second",
                  "watt",
                  "kilowatt",
                  "megawatt",
                  "gigawatt",
                  "terawatt",
                  "petawatt"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_speed": {
          "name": "convert_speed",
          "description": "Convert speed between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Speed value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "centimeters per minute",
                  "centimeters per second",
                  "feet per hour",
                  "feet per minute",
                  "feet per second",
                  "inches per minute",
                  "inches per second",
                  "kilometers per hour",
                  "kilometers per second",
                  "knots",
                  "Mach (ISA sea level)",
                  "speed of sound",
                  "meters per hour",
                  "meters per minute",
                  "meters per second",
                  "miles per hour",
                  "miles per minute",
                  "miles per second",
                  "yards per hour",
                  "yards per minute",
                  "yards per second",
                  "speed of light"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "centimeters per minute",
                  "centimeters per second",
                  "feet per hour",
                  "feet per minute",
                  "feet per second",
                  "inches per minute",
                  "inches per second",
                  "kilometers per hour",
                  "kilometers per second",
                  "knots",
                  "Mach (ISA sea level)",
                  "speed of sound",
                  "meters per hour",
                  "meters per minute",
                  "meters per second",
                  "miles per hour",
                  "miles per minute",
                  "miles per second",
                  "yards per hour",
                  "yards per minute",
                  "yards per second",
                  "speed of light"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_area": {
          "name": "convert_area",
          "description": "Convert area between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Area value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "acre",
                  "are",
                  "hectare",
                  "square centimeter",
                  "square foot",
                  "square inch",
                  "square kilometer",
                  "square meter",
                  "square mile",
                  "square millimeter",
                  "square yard"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "acre",
                  "are",
                  "hectare",
                  "square centimeter",
                  "square foot",
                  "square inch",
                  "square kilometer",
                  "square meter",
                  "square mile",
                  "square millimeter",
                  "square yard"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_mass": {
          "name": "convert_mass",
          "description": "Convert weight between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Weight value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "carat",
                  "decagram",
                  "hectogram",
                  "gram",
                  "milligram",
                  "microgram",
                  "nanogram",
                  "picogram",
                  "femtogram",
                  "grain",
                  "ounce",
                  "troy ounce",
                  "pound",
                  "stone",
                  "short ton (US)",
                  "long ton (UK)",
                  "tonne",
                  "kilotonne",
                  "megatonne",
                  "kilogram"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "carat",
                  "decagram",
                  "hectogram",
                  "gram",
                  "milligram",
                  "microgram",
                  "nanogram",
                  "picogram",
                  "femtogram",
                  "grain",
                  "ounce",
                  "troy ounce",
                  "pound",
                  "stone",
                  "short ton (US)",
                  "long ton (UK)",
                  "tonne",
                  "kilotonne",
                  "megatonne",
                  "kilogram"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_volume": {
          "name": "convert_volume",
          "description": "Convert volume between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Volume value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "acre foot",
                  "barrel (oil)",
                  "bushel (UK)",
                  "bushel (US)",
                  "bushel",
                  "centiliter",
                  "cubic centimeter",
                  "cubic decimeter",
                  "cubic foot",
                  "cubic inch",
                  "cubic kilometer",
                  "cubic meter",
                  "cubic mile",
                  "cubic millimeter",
                  "cubic yard",
                  "cup",
                  "deciliter",
                  "fluid ounce (imperial)",
                  "fluid ounce (US)",
                  "fluid ounce",
                  "gallon (imperial)",
                  "gallon (US)",
                  "gallon",
                  "kiloliter",
                  "liter",
                  "milliliter",
                  "microliter",
                  "nanoliter",
                  "picoliter",
                  "pint (imperial)",
                  "pint (US)",
                  "pint",
                  "quart (imperial)",
                  "quart (US)",
                  "quart",
                  "tablespoon",
                  "teaspoon"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "acre foot",
                  "barrel (oil)",
                  "bushel (UK)",
                  "bushel (US)",
                  "bushel",
                  "centiliter",
                  "cubic centimeter",
                  "cubic decimeter",
                  "cubic foot",
                  "cubic inch",
                  "cubic kilometer",
                  "cubic meter",
                  "cubic mile",
                  "cubic millimeter",
                  "cubic yard",
                  "cup",
                  "deciliter",
                  "fluid ounce (imperial)",
                  "fluid ounce (US)",
                  "fluid ounce",
                  "gallon (imperial)",
                  "gallon (US)",
                  "gallon",
                  "kiloliter",
                  "liter",
                  "milliliter",
                  "microliter",
                  "nanoliter",
                  "picoliter",
                  "pint (imperial)",
                  "pint (US)",
                  "pint",
                  "quart (imperial)",
                  "quart (US)",
                  "quart",
                  "tablespoon",
                  "teaspoon"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_computer_data": {
          "name": "convert_computer_data",
          "description": "Convert computer storage between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Computer storage value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "bits",
                  "bytes",
                  "kilobytes",
                  "megabytes",
                  "gigabytes",
                  "terabytes",
                  "petabytes",
                  "exabytes"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "bits",
                  "bytes",
                  "kilobytes",
                  "megabytes",
                  "gigabytes",
                  "terabytes",
                  "petabytes",
                  "exabytes"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_density": {
          "name": "convert_density",
          "description": "Convert density between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Density value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "grains per gallon (UK)",
                  "grains per gallon (US)",
                  "grains per gallon",
                  "grams per cubic centimeter",
                  "grams per liter",
                  "kilograms per liter",
                  "kilograms per cubic meter",
                  "milligrams per liter",
                  "ounces per gallon (UK)",
                  "ounces per gallon (US)",
                  "ounces per gallon",
                  "pounds per cubic foot",
                  "pounds per gallon (UK)",
                  "pounds per gallon (US)",
                  "pounds per gallon",
                  "tonnes per cubic meter",
                  "tons per cubic yard (UK)",
                  "tons per cubic yard (US)",
                  "tons per cubic yard"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "grains per gallon (UK)",
                  "grains per gallon (US)",
                  "grains per gallon",
                  "grams per cubic centimeter",
                  "grams per liter",
                  "kilograms per liter",
                  "kilograms per cubic meter",
                  "milligrams per liter",
                  "ounces per gallon (UK)",
                  "ounces per gallon (US)",
                  "ounces per gallon",
                  "pounds per cubic foot",
                  "pounds per gallon (UK)",
                  "pounds per gallon (US)",
                  "pounds per gallon",
                  "tonnes per cubic meter",
                  "tons per cubic yard (UK)",
                  "tons per cubic yard (US)",
                  "tons per cubic yard"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_time": {
          "name": "convert_time",
          "description": "Convert time between units.",
          "input_schema": {
            "properties": {
              "value": {
                "description": "Time value to convert",
                "title": "Value",
                "type": "number"
              },
              "from_unit": {
                "description": "Source unit",
                "enum": [
                  "picoseconds",
                  "femtoseconds",
                  "nanoseconds",
                  "microseconds",
                  "milliseconds",
                  "seconds",
                  "minutes",
                  "hours",
                  "days",
                  "weeks",
                  "fortnights",
                  "months",
                  "quarters",
                  "synodic months",
                  "years",
                  "decades",
                  "centuries",
                  "millennia"
                ],
                "title": "From Unit",
                "type": "string"
              },
              "to_unit": {
                "description": "Target unit",
                "enum": [
                  "picoseconds",
                  "femtoseconds",
                  "nanoseconds",
                  "microseconds",
                  "milliseconds",
                  "seconds",
                  "minutes",
                  "hours",
                  "days",
                  "weeks",
                  "fortnights",
                  "months",
                  "quarters",
                  "synodic months",
                  "years",
                  "decades",
                  "centuries",
                  "millennia"
                ],
                "title": "To Unit",
                "type": "string"
              }
            },
            "required": [
              "value",
              "from_unit",
              "to_unit"
            ],
            "type": "object"
          }
        },
        "convert_batch": {
          "name": "convert_batch",
          "description": "Perform multiple unit conversions in a single batch request.\n\nEach request in the batch should contain:\n- value: The numeric value to convert\n- from_unit: Source unit for conversion\n- to_unit: Target unit for conversion\n- conversion_type: Type of conversion (temperature, length, mass, etc.)\n- request_id: Optional identifier for tracking individual requests\n\nReturns a structured response with individual results for each conversion,\nincluding success/failure status and either converted values or error messages.",
          "input_schema": {
            "properties": {
              "requests": {
                "description": "List of conversion requests. Each request should contain: value (float), from_unit (str), to_unit (str), conversion_type (str), and optionally request_id (str)",
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "title": "Requests",
                "type": "array"
              }
            },
            "required": [
              "requests"
            ],
            "type": "object"
          }
        },
        "list_supported_units": {
          "name": "list_supported_units",
          "description": "List all supported units for each conversion type or for a specific type.",
          "input_schema": {
            "properties": {
              "unit_type": {
                "anyOf": [
                  {
                    "enum": [
                      "angle",
                      "area",
                      "computer_data",
                      "density",
                      "energy",
                      "force",
                      "length",
                      "mass",
                      "power",
                      "pressure",
                      "speed",
                      "temperature",
                      "time",
                      "volume"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Specific unit type to get supported units for. If not specified, returns all supported units.",
                "title": "Unit Type"
              }
            },
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Wikipedia": {
      "name": "Wikipedia",
      "icon": "",
      "description": "",
      "command": [
        "uv",
        "run",
        "python",
        "-m",
        "wikipedia_mcp"
      ],
      "connection_status": "success",
      "tools": {
        "search_wikipedia": {
          "name": "search_wikipedia",
          "description": "Search Wikipedia for articles matching a query.",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "type": "object"
          }
        },
        "get_article": {
          "name": "get_article",
          "description": "Get the full content of a Wikipedia article.",
          "input_schema": {
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              }
            },
            "required": [
              "title"
            ],
            "type": "object"
          }
        },
        "get_summary": {
          "name": "get_summary",
          "description": "Get a summary of a Wikipedia article.",
          "input_schema": {
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              }
            },
            "required": [
              "title"
            ],
            "type": "object"
          }
        },
        "summarize_article_for_query": {
          "name": "summarize_article_for_query",
          "description": "Get a summary of a Wikipedia article tailored to a specific query.",
          "input_schema": {
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              },
              "query": {
                "title": "Query",
                "type": "string"
              },
              "max_length": {
                "default": 250,
                "title": "Max Length",
                "type": "integer"
              }
            },
            "required": [
              "title",
              "query"
            ],
            "type": "object"
          }
        },
        "summarize_article_section": {
          "name": "summarize_article_section",
          "description": "Get a summary of a specific section of a Wikipedia article.",
          "input_schema": {
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              },
              "section_title": {
                "title": "Section Title",
                "type": "string"
              },
              "max_length": {
                "default": 150,
                "title": "Max Length",
                "type": "integer"
              }
            },
            "required": [
              "title",
              "section_title"
            ],
            "type": "object"
          }
        },
        "extract_key_facts": {
          "name": "extract_key_facts",
          "description": "Extract key facts from a Wikipedia article, optionally focused on a topic.",
          "input_schema": {
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              },
              "topic_within_article": {
                "default": "",
                "title": "Topic Within Article",
                "type": "string"
              },
              "count": {
                "default": 5,
                "title": "Count",
                "type": "integer"
              }
            },
            "required": [
              "title"
            ],
            "type": "object"
          }
        },
        "get_related_topics": {
          "name": "get_related_topics",
          "description": "Get topics related to a Wikipedia article based on links and categories.",
          "input_schema": {
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "title"
            ],
            "type": "object"
          }
        },
        "get_sections": {
          "name": "get_sections",
          "description": "Get the sections of a Wikipedia article.",
          "input_schema": {
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              }
            },
            "required": [
              "title"
            ],
            "type": "object"
          }
        },
        "get_links": {
          "name": "get_links",
          "description": "Get the links contained within a Wikipedia article.",
          "input_schema": {
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              }
            },
            "required": [
              "title"
            ],
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Google Maps": {
      "name": "Google Maps",
      "icon": "",
      "description": "",
      "command": [
        "node",
        "dist/cli.js",
        "--port",
        "3001"
      ],
      "connection_status": "success",
      "tools": {
        "search_nearby": {
          "name": "search_nearby",
          "description": "Search for nearby places based on location, with optional filtering by keywords, distance, rating, and operating hours",
          "input_schema": {
            "type": "object",
            "properties": {
              "center": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Address, landmark name, or coordinates (coordinate format: lat,lng)"
                  },
                  "isCoordinates": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the value is coordinates"
                  }
                },
                "required": [
                  "value"
                ],
                "additionalProperties": false,
                "description": "Search center point"
              },
              "keyword": {
                "type": "string",
                "description": "Search keyword (e.g., restaurant, cafe, hotel)"
              },
              "radius": {
                "type": "number",
                "default": 1000,
                "description": "Search radius in meters"
              },
              "openNow": {
                "type": "boolean",
                "default": false,
                "description": "Only show places that are currently open"
              },
              "minRating": {
                "type": "number",
                "minimum": 0,
                "maximum": 5,
                "description": "Minimum rating requirement (0-5)"
              }
            },
            "required": [
              "center"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "get_place_details": {
          "name": "get_place_details",
          "description": "Get detailed information about a specific place including contact details, reviews, ratings, and operating hours",
          "input_schema": {
            "type": "object",
            "properties": {
              "placeId": {
                "type": "string",
                "description": "Google Maps place ID"
              }
            },
            "required": [
              "placeId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "maps_geocode": {
          "name": "maps_geocode",
          "description": "Convert addresses or place names to geographic coordinates (latitude and longitude)",
          "input_schema": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "Address or place name to convert to coordinates"
              }
            },
            "required": [
              "address"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "maps_reverse_geocode": {
          "name": "maps_reverse_geocode",
          "description": "Convert geographic coordinates (latitude and longitude) to a human-readable address",
          "input_schema": {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number",
                "description": "Latitude coordinate"
              },
              "longitude": {
                "type": "number",
                "description": "Longitude coordinate"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "maps_distance_matrix": {
          "name": "maps_distance_matrix",
          "description": "Calculate travel distances and durations between multiple origins and destinations for different travel modes",
          "input_schema": {
            "type": "object",
            "properties": {
              "origins": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of origin addresses or coordinates"
              },
              "destinations": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of destination addresses or coordinates"
              },
              "mode": {
                "type": "string",
                "enum": [
                  "driving",
                  "walking",
                  "bicycling",
                  "transit"
                ],
                "default": "driving",
                "description": "Travel mode for calculation"
              }
            },
            "required": [
              "origins",
              "destinations"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "maps_directions": {
          "name": "maps_directions",
          "description": "Get detailed turn-by-turn navigation directions between two locations with route information",
          "input_schema": {
            "type": "object",
            "properties": {
              "origin": {
                "type": "string",
                "description": "Starting point address or coordinates"
              },
              "destination": {
                "type": "string",
                "description": "Destination address or coordinates"
              },
              "mode": {
                "type": "string",
                "enum": [
                  "driving",
                  "walking",
                  "bicycling",
                  "transit"
                ],
                "default": "driving",
                "description": "Travel mode for directions"
              },
              "departure_time": {
                "type": "string",
                "description": "Departure time (ISO string format)"
              },
              "arrival_time": {
                "type": "string",
                "description": "Arrival time (ISO string format)"
              }
            },
            "required": [
              "origin",
              "destination"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "maps_elevation": {
          "name": "maps_elevation",
          "description": "Get elevation data (height above sea level) for specific geographic locations",
          "input_schema": {
            "type": "object",
            "properties": {
              "locations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "latitude": {
                      "type": "number",
                      "description": "Latitude coordinate"
                    },
                    "longitude": {
                      "type": "number",
                      "description": "Longitude coordinate"
                    }
                  },
                  "required": [
                    "latitude",
                    "longitude"
                  ],
                  "additionalProperties": false
                },
                "description": "List of locations to get elevation data for"
              }
            },
            "required": [
              "locations"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "attempts": 1
    },
    "Bibliomantic": {
      "name": "Bibliomantic",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "bibliomantic_server.py"
      ],
      "connection_status": "success",
      "tools": {
        "i_ching_divination": {
          "name": "i_ching_divination",
          "description": "\n    Enhanced I Ching divination with traditional three-coin method and changing lines.\n    MAINTAINS EXACT BACKWARD COMPATIBILITY while providing richer content.\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Query"
              }
            },
            "title": "i_ching_divinationArguments",
            "type": "object"
          }
        },
        "bibliomantic_consultation": {
          "name": "bibliomantic_consultation",
          "description": "\n    Enhanced bibliomantic consultation with full traditional I Ching elements.\n    DRAMATICALLY IMPROVED CONTENT while maintaining exact interface compatibility.\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "title": "bibliomantic_consultationArguments",
            "type": "object"
          }
        },
        "get_hexagram_details": {
          "name": "get_hexagram_details",
          "description": "\n    Enhanced hexagram details with traditional Chinese names, Unicode symbols, and rich commentary.\n    MAINTAINS BACKWARD COMPATIBILITY while dramatically improving content quality.\n    ",
          "input_schema": {
            "properties": {
              "hexagram_number": {
                "title": "Hexagram Number",
                "type": "integer"
              }
            },
            "required": [
              "hexagram_number"
            ],
            "title": "get_hexagram_detailsArguments",
            "type": "object"
          }
        },
        "server_statistics": {
          "name": "server_statistics",
          "description": "Enhanced server statistics",
          "input_schema": {
            "properties": {},
            "title": "server_statisticsArguments",
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "BioMCP": {
      "name": "BioMCP",
      "icon": "",
      "description": "",
      "command": [
        "uv",
        "run",
        "biomcp",
        "run"
      ],
      "connection_status": "success",
      "tools": {
        "search": {
          "name": "search",
          "description": "Search biomedical literature, clinical trials, genetic variants, genes, drugs, and diseases.\n\n⚠️ IMPORTANT: Have you used the 'think' tool first? If not, STOP and use it NOW!\nThe 'think' tool is REQUIRED for proper research planning and should be your FIRST step.\n\nThis tool provides access to biomedical data from PubMed/PubTator3, ClinicalTrials.gov,\nMyVariant.info, and the BioThings suite (MyGene.info, MyChem.info, MyDisease.info).\nIt supports two search modes:\n\n## 1. UNIFIED QUERY LANGUAGE\nUse the 'query' parameter with field-based syntax for precise cross-domain searches.\n\nSyntax:\n- Basic: \"gene:BRAF\"\n- AND logic: \"gene:BRAF AND disease:melanoma\"\n- OR logic: \"gene:PTEN AND (R173 OR Arg173 OR 'position 173')\"\n- Domain-specific: \"trials.condition:melanoma AND trials.phase:3\"\n\nCommon fields:\n- Cross-domain: gene, disease, variant, chemical/drug\n- Articles: pmid, title, abstract, journal, author\n- Trials: trials.condition, trials.intervention, trials.phase, trials.status\n- Variants: variants.hgvs, variants.rsid, variants.significance\n\nExample:\n```\nawait search(\n    query=\"gene:BRAF AND disease:melanoma AND trials.phase:3\",\n    max_results_per_domain=20\n)\n```\n\n## 2. DOMAIN-SPECIFIC SEARCH\nUse the 'domain' parameter with specific filters for targeted searches.\n\nDomains:\n- \"article\": Search PubMed/PubTator3 for research articles and preprints ABOUT genes, variants, diseases, or chemicals\n- \"trial\": Search ClinicalTrials.gov for clinical studies\n- \"variant\": Search MyVariant.info for genetic variant DATABASE RECORDS (population frequency, clinical significance, etc.) - NOT for articles about variants!\n- \"gene\": Search MyGene.info for gene information (symbol, name, function, aliases)\n- \"drug\": Search MyChem.info for drug/chemical information (names, formulas, indications)\n- \"disease\": Search MyDisease.info for disease information (names, definitions, synonyms)\n- \"nci_organization\": Search NCI database for cancer centers, hospitals, and research sponsors (requires API key)\n- \"nci_intervention\": Search NCI database for drugs, devices, procedures used in cancer trials (requires API key)\n- \"nci_biomarker\": Search NCI database for biomarkers used in trial eligibility criteria (requires API key)\n- \"nci_disease\": Search NCI controlled vocabulary for cancer conditions and terms (requires API key)\n\nExample:\n```\nawait search(\n    domain=\"article\",\n    genes=[\"BRAF\", \"NRAS\"],\n    diseases=[\"melanoma\"],\n    page_size=50\n)\n```\n\n## DOMAIN SELECTION EXAMPLES:\n- To find ARTICLES about BRAF V600E mutation: domain=\"article\", genes=[\"BRAF\"], variants=[\"V600E\"]\n- To find VARIANT DATA for BRAF mutations: domain=\"variant\", gene=\"BRAF\"\n- To find articles about ERBB2 p.D277Y: domain=\"article\", genes=[\"ERBB2\"], variants=[\"p.D277Y\"]\n- Common mistake: Using domain=\"variant\" when you want articles about a variant\n\n## IMPORTANT NOTES:\n- For complex research questions, use the separate 'think' tool for systematic analysis\n- The tool returns results in OpenAI MCP format: {\"results\": [{\"id\", \"title\", \"text\", \"url\"}, ...]}\n- Search results do NOT include metadata (per OpenAI MCP specification)\n- Use the fetch tool to get detailed metadata for specific records\n- Use get_schema=True to explore available search fields\n- Use explain_query=True to understand query parsing (unified mode)\n- Domain-specific searches use AND logic for multiple values\n- For OR logic, use the unified query language\n- NEW: Article search keywords support OR with pipe separator: \"R173|Arg173|p.R173\"\n- Remember: domain=\"article\" finds LITERATURE, domain=\"variant\" finds DATABASE RECORDS\n\n## RETURN FORMAT:\nAll search modes return results in this format:\n```json\n{\n    \"results\": [\n        {\n            \"id\": \"unique_identifier\",\n            \"title\": \"Human-readable title\",\n            \"text\": \"Summary or snippet of content\",\n            \"url\": \"Link to full resource\"\n        }\n    ]\n}\n```\n",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "call_benefit": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Brief explanation of why this search is being performed and expected benefit. Helps improve search accuracy and provides context for analytics. Highly recommended for better results.",
                "title": "Call Benefit"
              },
              "domain": {
                "anyOf": [
                  {
                    "enum": [
                      "article",
                      "trial",
                      "variant",
                      "gene",
                      "drug",
                      "disease",
                      "nci_organization",
                      "nci_intervention",
                      "nci_biomarker",
                      "nci_disease",
                      "fda_adverse",
                      "fda_label",
                      "fda_device",
                      "fda_approval",
                      "fda_recall",
                      "fda_shortage"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Domain to search: 'article' for papers/literature ABOUT genes/variants/diseases, 'trial' for clinical studies, 'variant' for genetic variant DATABASE RECORDS, 'gene' for gene information from MyGene.info, 'drug' for drug/chemical information from MyChem.info, 'disease' for disease information from MyDisease.info, 'nci_organization' for NCI cancer centers/sponsors, 'nci_intervention' for NCI drugs/devices/procedures, 'nci_biomarker' for NCI trial eligibility biomarkers, 'nci_disease' for NCI cancer vocabulary, 'fda_adverse' for FDA adverse event reports, 'fda_label' for FDA drug labels, 'fda_device' for FDA device events, 'fda_approval' for FDA drug approvals, 'fda_recall' for FDA drug recalls, 'fda_shortage' for FDA drug shortages",
                "title": "Domain"
              },
              "genes": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Genes"
              },
              "diseases": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Diseases"
              },
              "variants": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Variants"
              },
              "chemicals": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Chemicals"
              },
              "keywords": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Keywords"
              },
              "conditions": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Conditions"
              },
              "interventions": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Interventions"
              },
              "recruiting_status": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Recruiting Status"
              },
              "phase": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Phase"
              },
              "significance": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Significance"
              },
              "lat": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Lat"
              },
              "long": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Long"
              },
              "distance": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Distance"
              },
              "page": {
                "default": 1,
                "title": "Page",
                "type": "integer"
              },
              "page_size": {
                "default": 10,
                "title": "Page Size",
                "type": "integer"
              },
              "max_results_per_domain": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Max Results Per Domain"
              },
              "explain_query": {
                "default": false,
                "title": "Explain Query",
                "type": "boolean"
              },
              "get_schema": {
                "default": false,
                "title": "Get Schema",
                "type": "boolean"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "NCI API key for searching NCI domains (nci_organization, nci_intervention, nci_biomarker, nci_disease). Required for NCI searches. Get a free key at: https://clinicaltrialsapi.cancer.gov/",
                "title": "Api Key"
              }
            },
            "required": [
              "query"
            ],
            "title": "searchArguments",
            "type": "object"
          }
        },
        "fetch": {
          "name": "fetch",
          "description": "Fetch comprehensive details for a specific biomedical record.\n\nThis tool retrieves full information for articles, clinical trials, genetic variants,\ngenes, drugs, or diseases using their unique identifiers. It returns data in a\nstandardized format suitable for detailed analysis and research.\n\n## IDENTIFIER FORMATS:\n- Articles: PMID (PubMed ID) - e.g., \"35271234\" OR DOI - e.g., \"10.1101/2024.01.20.23288905\"\n- Trials: NCT ID (ClinicalTrials.gov ID) - e.g., \"NCT04280705\"\n- Variants: HGVS notation or dbSNP ID - e.g., \"chr7:g.140453136A>T\" or \"rs121913254\"\n- Genes: Gene symbol or Entrez ID - e.g., \"BRAF\" or \"673\"\n- Drugs: Drug name or ID - e.g., \"imatinib\" or \"DB00619\"\n- Diseases: Disease name or ID - e.g., \"melanoma\" or \"MONDO:0005105\"\n- NCI Organizations: NCI organization ID - e.g., \"NCI-2011-03337\"\n- NCI Interventions: NCI intervention ID - e.g., \"INT123456\"\n- NCI Diseases: NCI disease ID - e.g., \"C4872\"\n\nThe domain is automatically detected from the ID format if not provided:\n- NCT* → trial\n- Contains \"/\" with numeric prefix (DOI) → article\n- Pure numeric → article (PMID)\n- rs* or contains ':' or 'g.' → variant\n- For genes, drugs, diseases: manual specification recommended\n\n## DOMAIN-SPECIFIC OPTIONS:\n\n### Articles (domain=\"article\"):\n- Returns full article metadata, abstract, and full text when available\n- Supports both PubMed articles (via PMID) and Europe PMC preprints (via DOI)\n- Includes annotations for genes, diseases, chemicals, and variants (PubMed only)\n- detail=\"full\" attempts to retrieve full text content (PubMed only)\n\n### Clinical Trials (domain=\"trial\"):\n- detail=None or \"protocol\": Core study information\n- detail=\"locations\": Study sites and contact information\n- detail=\"outcomes\": Primary/secondary outcomes and results\n- detail=\"references\": Related publications and citations\n- detail=\"all\": Complete trial record with all sections\n\n### Variants (domain=\"variant\"):\n- Returns comprehensive variant information including:\n  - Clinical significance and interpretations\n  - Population frequencies\n  - Gene/protein effects\n  - External database links\n- detail parameter is ignored (always returns full data)\n\n### Genes (domain=\"gene\"):\n- Returns gene information from MyGene.info including:\n  - Gene symbol, name, and type\n  - Entrez ID and Ensembl IDs\n  - Gene summary and aliases\n  - RefSeq information\n- detail parameter is ignored (always returns full data)\n\n### Drugs (domain=\"drug\"):\n- Returns drug/chemical information from MyChem.info including:\n  - Drug name and trade names\n  - Chemical formula and structure IDs\n  - Clinical indications\n  - Mechanism of action\n  - External database links (DrugBank, PubChem, ChEMBL)\n- detail parameter is ignored (always returns full data)\n\n### Diseases (domain=\"disease\"):\n- Returns disease information from MyDisease.info including:\n  - Disease name and definition\n  - MONDO ontology ID\n  - Disease synonyms\n  - Cross-references to other databases\n  - Associated phenotypes\n- detail parameter is ignored (always returns full data)\n\n### NCI Organizations (domain=\"nci_organization\"):\n- Returns organization information from NCI database including:\n  - Organization name and type\n  - Full address and contact information\n  - Research focus areas\n  - Associated clinical trials\n- Requires NCI API key\n- detail parameter is ignored (always returns full data)\n\n### NCI Interventions (domain=\"nci_intervention\"):\n- Returns intervention information from NCI database including:\n  - Intervention name and type\n  - Synonyms and alternative names\n  - Mechanism of action (for drugs)\n  - FDA approval status\n  - Associated clinical trials\n- Requires NCI API key\n- detail parameter is ignored (always returns full data)\n\n### NCI Diseases (domain=\"nci_disease\"):\n- Returns disease information from NCI controlled vocabulary including:\n  - Preferred disease name\n  - Disease category and classification\n  - All known synonyms\n  - Cross-reference codes (ICD, SNOMED)\n- Requires NCI API key\n- detail parameter is ignored (always returns full data)\n\n## RETURN FORMAT:\nAll fetch operations return a standardized format:\n```json\n{\n    \"id\": \"unique_identifier\",\n    \"title\": \"Record title or name\",\n    \"text\": \"Full content or comprehensive description\",\n    \"url\": \"Link to original source\",\n    \"metadata\": {\n        // Domain-specific additional fields\n    }\n}\n```\n\n## EXAMPLES:\n\nFetch article by PMID (domain auto-detected):\n```\nawait fetch(id=\"35271234\")\n```\n\nFetch article by DOI (domain auto-detected):\n```\nawait fetch(id=\"10.1101/2024.01.20.23288905\")\n```\n\nFetch complete trial information (domain auto-detected):\n```\nawait fetch(\n    id=\"NCT04280705\",\n    detail=\"all\"\n)\n```\n\nFetch variant with clinical interpretations:\n```\nawait fetch(id=\"rs121913254\")\n```\n\nExplicitly specify domain (optional):\n```\nawait fetch(\n    domain=\"variant\",\n    id=\"chr7:g.140453136A>T\"\n)\n```\n",
          "input_schema": {
            "properties": {
              "id": {
                "title": "Id",
                "type": "string"
              },
              "domain": {
                "anyOf": [
                  {
                    "enum": [
                      "article",
                      "trial",
                      "variant",
                      "gene",
                      "drug",
                      "disease",
                      "nci_organization",
                      "nci_intervention",
                      "nci_biomarker",
                      "nci_disease",
                      "fda_adverse",
                      "fda_label",
                      "fda_device",
                      "fda_approval",
                      "fda_recall",
                      "fda_shortage"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Domain of the record (auto-detected if not provided)",
                "title": "Domain"
              },
              "call_benefit": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Brief explanation of why this fetch is being performed and expected benefit. Helps provide context for analytics and improves result relevance.",
                "title": "Call Benefit"
              },
              "detail": {
                "anyOf": [
                  {
                    "enum": [
                      "protocol",
                      "locations",
                      "outcomes",
                      "references",
                      "all",
                      "full"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Detail"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "NCI API key for fetching NCI records (nci_organization, nci_intervention, nci_disease). Required for NCI fetches. Get a free key at: https://clinicaltrialsapi.cancer.gov/",
                "title": "Api Key"
              }
            },
            "required": [
              "id"
            ],
            "title": "fetchArguments",
            "type": "object"
          }
        },
        "think": {
          "name": "think",
          "description": "REQUIRED FIRST STEP: Perform structured sequential thinking for ANY biomedical research task.\n\n🚨 IMPORTANT: You MUST use this tool BEFORE any search or fetch operations when:\n- Researching ANY biomedical topic (genes, diseases, variants, trials)\n- Planning to use multiple BioMCP tools\n- Answering questions that require analysis or synthesis\n- Comparing information from different sources\n- Making recommendations or drawing conclusions\n\n⚠️ FAILURE TO USE THIS TOOL FIRST will result in:\n- Incomplete or poorly structured analysis\n- Missing important connections between data\n- Suboptimal search strategies\n- Overlooked critical information\n\nSequential thinking ensures you:\n1. Fully understand the research question\n2. Plan an optimal search strategy\n3. Identify all relevant data sources\n4. Structure your analysis properly\n5. Deliver comprehensive, well-reasoned results\n\n## Usage Pattern:\n1. Start with thoughtNumber=1 to initiate analysis\n2. Progress through numbered thoughts sequentially\n3. Adjust totalThoughts estimate as understanding develops\n4. Set nextThoughtNeeded=False only when analysis is complete\n\n## Example:\n```python\n# Initial analysis\nawait think(\n    thought=\"Breaking down the relationship between BRAF mutations and melanoma treatment resistance...\",\n    thoughtNumber=1,\n    totalThoughts=5,\n    nextThoughtNeeded=True\n)\n\n# Continue analysis\nawait think(\n    thought=\"Examining specific BRAF V600E mutation mechanisms...\",\n    thoughtNumber=2,\n    totalThoughts=5,\n    nextThoughtNeeded=True\n)\n\n# Final thought\nawait think(\n    thought=\"Synthesizing findings and proposing research directions...\",\n    thoughtNumber=5,\n    totalThoughts=5,\n    nextThoughtNeeded=False\n)\n```\n\n## Important Notes:\n- Each thought builds on previous ones within a session\n- State is maintained throughout the MCP session\n- Use thoughtful, detailed analysis in each step\n- Revisions and branching are supported through the underlying implementation\n",
          "input_schema": {
            "properties": {
              "thought": {
                "description": "Current thinking step for analysis",
                "title": "Thought",
                "type": "string"
              },
              "thoughtNumber": {
                "description": "Current thought number, starting at 1",
                "minimum": 1,
                "title": "Thoughtnumber",
                "type": "integer"
              },
              "totalThoughts": {
                "description": "Estimated total thoughts needed for complete analysis",
                "minimum": 1,
                "title": "Totalthoughts",
                "type": "integer"
              },
              "nextThoughtNeeded": {
                "default": true,
                "description": "Whether more thinking steps are needed after this one",
                "title": "Nextthoughtneeded",
                "type": "boolean"
              }
            },
            "required": [
              "thought",
              "thoughtNumber",
              "totalThoughts"
            ],
            "title": "thinkArguments",
            "type": "object"
          }
        },
        "article_searcher": {
          "name": "article_searcher",
          "description": "Search PubMed/PubTator3 for research articles and preprints.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\nUse this tool to find scientific literature ABOUT genes, variants, diseases, or chemicals.\nResults include articles from PubMed and optionally preprints from bioRxiv/medRxiv.\n\nImportant: This searches for ARTICLES ABOUT these topics, not database records.\nFor genetic variant database records, use variant_searcher instead.\n\nExample usage:\n- Find articles about BRAF mutations in melanoma\n- Search for papers on a specific drug's effects\n- Locate research on gene-disease associations\n",
          "input_schema": {
            "properties": {
              "chemicals": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Chemical/drug names to search for",
                "title": "Chemicals"
              },
              "diseases": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Disease names to search for",
                "title": "Diseases"
              },
              "genes": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Gene symbols to search for",
                "title": "Genes"
              },
              "keywords": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Free-text keywords to search for",
                "title": "Keywords"
              },
              "variants": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Variant strings to search for (e.g., 'V600E', 'p.D277Y')",
                "title": "Variants"
              },
              "include_preprints": {
                "default": true,
                "description": "Include preprints from bioRxiv/medRxiv",
                "title": "Include Preprints",
                "type": "boolean"
              },
              "include_cbioportal": {
                "default": true,
                "description": "Include cBioPortal cancer genomics summary when searching by gene",
                "title": "Include Cbioportal",
                "type": "boolean"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "page_size": {
                "default": 10,
                "description": "Results per page",
                "maximum": 100,
                "minimum": 1,
                "title": "Page Size",
                "type": "integer"
              }
            },
            "title": "article_searcherArguments",
            "type": "object"
          }
        },
        "article_getter": {
          "name": "article_getter",
          "description": "Fetch detailed information for a specific article.\n\nRetrieves the full abstract and available text for an article by its identifier.\nSupports:\n- PubMed IDs (PMID) for published articles\n- PMC IDs for articles in PubMed Central\n- DOIs for preprints from Europe PMC\n\nReturns formatted text including:\n- Title\n- Abstract\n- Full text (when available from PMC for published articles)\n- Source information (PubMed or Europe PMC)\n",
          "input_schema": {
            "properties": {
              "pmid": {
                "description": "Article identifier - either a PubMed ID (e.g., '38768446' or 'PMC11193658') or DOI (e.g., '10.1101/2024.01.20.23288905')",
                "title": "Pmid",
                "type": "string"
              }
            },
            "required": [
              "pmid"
            ],
            "title": "article_getterArguments",
            "type": "object"
          }
        },
        "trial_searcher": {
          "name": "trial_searcher",
          "description": "Search ClinicalTrials.gov for clinical studies.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\nComprehensive search tool for finding clinical trials based on multiple criteria.\nSupports filtering by conditions, interventions, location, phase, and eligibility.\n\nLocation search notes:\n- Use either location term OR lat/long coordinates, not both\n- For city-based searches, AI agents should geocode to lat/long first\n- Distance parameter only works with lat/long coordinates\n\nReturns a formatted list of matching trials with key details.\n",
          "input_schema": {
            "properties": {
              "conditions": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Medical conditions to search for",
                "title": "Conditions"
              },
              "interventions": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Treatment interventions to search for",
                "title": "Interventions"
              },
              "other_terms": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Additional search terms",
                "title": "Other Terms"
              },
              "recruiting_status": {
                "anyOf": [
                  {
                    "enum": [
                      "OPEN",
                      "CLOSED",
                      "ANY"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Filter by recruiting status",
                "title": "Recruiting Status"
              },
              "phase": {
                "anyOf": [
                  {
                    "enum": [
                      "EARLY_PHASE1",
                      "PHASE1",
                      "PHASE2",
                      "PHASE3",
                      "PHASE4",
                      "NOT_APPLICABLE"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Filter by clinical trial phase",
                "title": "Phase"
              },
              "location": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Location term for geographic filtering",
                "title": "Location"
              },
              "lat": {
                "anyOf": [
                  {
                    "maximum": 90.0,
                    "minimum": -90.0,
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Latitude for location-based search. AI agents should geocode city names before using.",
                "title": "Lat"
              },
              "long": {
                "anyOf": [
                  {
                    "maximum": 180.0,
                    "minimum": -180.0,
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Longitude for location-based search. AI agents should geocode city names before using.",
                "title": "Long"
              },
              "distance": {
                "anyOf": [
                  {
                    "minimum": 1,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Distance in miles from lat/long coordinates",
                "title": "Distance"
              },
              "age_group": {
                "anyOf": [
                  {
                    "enum": [
                      "CHILD",
                      "ADULT",
                      "OLDER_ADULT"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Filter by age group",
                "title": "Age Group"
              },
              "sex": {
                "anyOf": [
                  {
                    "enum": [
                      "FEMALE",
                      "MALE",
                      "ALL"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Filter by biological sex",
                "title": "Sex"
              },
              "healthy_volunteers": {
                "anyOf": [
                  {
                    "enum": [
                      "YES",
                      "NO"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Filter by healthy volunteer eligibility",
                "title": "Healthy Volunteers"
              },
              "study_type": {
                "anyOf": [
                  {
                    "enum": [
                      "INTERVENTIONAL",
                      "OBSERVATIONAL",
                      "EXPANDED_ACCESS"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Filter by study type",
                "title": "Study Type"
              },
              "funder_type": {
                "anyOf": [
                  {
                    "enum": [
                      "NIH",
                      "OTHER_GOV",
                      "INDUSTRY",
                      "OTHER"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Filter by funding source",
                "title": "Funder Type"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "page_size": {
                "default": 10,
                "description": "Results per page",
                "maximum": 100,
                "minimum": 1,
                "title": "Page Size",
                "type": "integer"
              }
            },
            "title": "trial_searcherArguments",
            "type": "object"
          }
        },
        "trial_getter": {
          "name": "trial_getter",
          "description": "Fetch comprehensive details for a specific clinical trial.\n\nRetrieves all available information for a clinical trial by its NCT ID.\nThis includes protocol details, locations, outcomes, and references.\n\nFor specific sections only, use the specialized getter tools:\n- trial_protocol_getter: Core protocol information\n- trial_locations_getter: Site locations and contacts\n- trial_outcomes_getter: Primary/secondary outcomes and results\n- trial_references_getter: Publications and references\n",
          "input_schema": {
            "properties": {
              "nct_id": {
                "description": "NCT ID (e.g., 'NCT06524388')",
                "title": "Nct Id",
                "type": "string"
              }
            },
            "required": [
              "nct_id"
            ],
            "title": "trial_getterArguments",
            "type": "object"
          }
        },
        "trial_protocol_getter": {
          "name": "trial_protocol_getter",
          "description": "Fetch core protocol information for a clinical trial.\n\nRetrieves essential protocol details including:\n- Official title and brief summary\n- Study status and sponsor information\n- Study design (type, phase, allocation, masking)\n- Eligibility criteria\n- Primary completion date\n",
          "input_schema": {
            "properties": {
              "nct_id": {
                "description": "NCT ID (e.g., 'NCT06524388')",
                "title": "Nct Id",
                "type": "string"
              }
            },
            "required": [
              "nct_id"
            ],
            "title": "trial_protocol_getterArguments",
            "type": "object"
          }
        },
        "trial_references_getter": {
          "name": "trial_references_getter",
          "description": "Fetch publications and references for a clinical trial.\n\nRetrieves all linked publications including:\n- Published results papers\n- Background literature\n- Protocol publications\n- Related analyses\n\nIncludes PubMed IDs when available for easy cross-referencing.\n",
          "input_schema": {
            "properties": {
              "nct_id": {
                "description": "NCT ID (e.g., 'NCT06524388')",
                "title": "Nct Id",
                "type": "string"
              }
            },
            "required": [
              "nct_id"
            ],
            "title": "trial_references_getterArguments",
            "type": "object"
          }
        },
        "trial_outcomes_getter": {
          "name": "trial_outcomes_getter",
          "description": "Fetch outcome measures and results for a clinical trial.\n\nRetrieves detailed outcome information including:\n- Primary outcome measures\n- Secondary outcome measures\n- Results data (if available)\n- Adverse events (if reported)\n\nNote: Results are only available for completed trials that have posted data.\n",
          "input_schema": {
            "properties": {
              "nct_id": {
                "description": "NCT ID (e.g., 'NCT06524388')",
                "title": "Nct Id",
                "type": "string"
              }
            },
            "required": [
              "nct_id"
            ],
            "title": "trial_outcomes_getterArguments",
            "type": "object"
          }
        },
        "trial_locations_getter": {
          "name": "trial_locations_getter",
          "description": "Fetch contact and location details for a clinical trial.\n\nRetrieves all study locations including:\n- Facility names and addresses\n- Principal investigator information\n- Contact details (when recruiting)\n- Recruitment status by site\n\nUseful for finding trials near specific locations or contacting study teams.\n",
          "input_schema": {
            "properties": {
              "nct_id": {
                "description": "NCT ID (e.g., 'NCT06524388')",
                "title": "Nct Id",
                "type": "string"
              }
            },
            "required": [
              "nct_id"
            ],
            "title": "trial_locations_getterArguments",
            "type": "object"
          }
        },
        "variant_searcher": {
          "name": "variant_searcher",
          "description": "Search MyVariant.info for genetic variant DATABASE RECORDS.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\nImportant: This searches for variant DATABASE RECORDS (frequency, significance, etc.),\nNOT articles about variants. For articles about variants, use article_searcher.\n\nSearches the comprehensive variant database including:\n- Population frequencies (gnomAD, 1000 Genomes, etc.)\n- Clinical significance (ClinVar)\n- Functional predictions (SIFT, PolyPhen, CADD)\n- Gene and protein consequences\n\nSearch by various identifiers or filter by clinical/functional criteria.\n",
          "input_schema": {
            "properties": {
              "gene": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Gene symbol (e.g., 'BRAF', 'TP53')",
                "title": "Gene"
              },
              "hgvs": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "HGVS notation (genomic, coding, or protein)",
                "title": "Hgvs"
              },
              "hgvsp": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Protein change in HGVS format (e.g., 'p.V600E')",
                "title": "Hgvsp"
              },
              "hgvsc": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Coding sequence change (e.g., 'c.1799T>A')",
                "title": "Hgvsc"
              },
              "rsid": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "dbSNP rsID (e.g., 'rs113488022')",
                "title": "Rsid"
              },
              "region": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Genomic region (e.g., 'chr7:140753336-140753337')",
                "title": "Region"
              },
              "significance": {
                "anyOf": [
                  {
                    "enum": [
                      "pathogenic",
                      "likely_pathogenic",
                      "uncertain_significance",
                      "likely_benign",
                      "benign",
                      "conflicting"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Clinical significance filter",
                "title": "Significance"
              },
              "frequency_min": {
                "anyOf": [
                  {
                    "maximum": 1.0,
                    "minimum": 0.0,
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Minimum allele frequency",
                "title": "Frequency Min"
              },
              "frequency_max": {
                "anyOf": [
                  {
                    "maximum": 1.0,
                    "minimum": 0.0,
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Maximum allele frequency",
                "title": "Frequency Max"
              },
              "consequence": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Variant consequence (e.g., 'missense_variant')",
                "title": "Consequence"
              },
              "cadd_score_min": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Minimum CADD score for pathogenicity",
                "title": "Cadd Score Min"
              },
              "sift_prediction": {
                "anyOf": [
                  {
                    "enum": [
                      "deleterious",
                      "tolerated"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "SIFT functional prediction",
                "title": "Sift Prediction"
              },
              "polyphen_prediction": {
                "anyOf": [
                  {
                    "enum": [
                      "probably_damaging",
                      "possibly_damaging",
                      "benign"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "PolyPhen-2 functional prediction",
                "title": "Polyphen Prediction"
              },
              "include_cbioportal": {
                "default": true,
                "description": "Include cBioPortal cancer genomics summary when searching by gene",
                "title": "Include Cbioportal",
                "type": "boolean"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "page_size": {
                "default": 10,
                "description": "Results per page",
                "maximum": 100,
                "minimum": 1,
                "title": "Page Size",
                "type": "integer"
              }
            },
            "title": "variant_searcherArguments",
            "type": "object"
          }
        },
        "variant_getter": {
          "name": "variant_getter",
          "description": "Fetch comprehensive details for a specific genetic variant.\n\nRetrieves all available information for a variant including:\n- Gene location and consequences\n- Population frequencies across databases\n- Clinical significance from ClinVar\n- Functional predictions\n- External annotations (TCGA cancer data, conservation scores)\n\nAccepts various ID formats:\n- HGVS: NM_004333.4:c.1799T>A\n- rsID: rs113488022\n- MyVariant ID: chr7:g.140753336A>T\n",
          "input_schema": {
            "properties": {
              "variant_id": {
                "description": "Variant ID (HGVS, rsID, or MyVariant ID like 'chr7:g.140753336A>T')",
                "title": "Variant Id",
                "type": "string"
              },
              "include_external": {
                "default": true,
                "description": "Include external annotations (TCGA, 1000 Genomes, functional predictions)",
                "title": "Include External",
                "type": "boolean"
              }
            },
            "required": [
              "variant_id"
            ],
            "title": "variant_getterArguments",
            "type": "object"
          }
        },
        "alphagenome_predictor": {
          "name": "alphagenome_predictor",
          "description": "Predict variant effects on gene regulation using Google DeepMind's AlphaGenome.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your analysis strategy!\n\nAlphaGenome provides state-of-the-art predictions for how genetic variants\naffect gene regulation, including:\n- Gene expression changes (RNA-seq)\n- Chromatin accessibility impacts (ATAC-seq, DNase-seq)\n- Splicing alterations\n- Promoter activity changes (CAGE)\n\nThis tool requires:\n1. AlphaGenome to be installed (see error message for instructions)\n2. An API key from https://deepmind.google.com/science/alphagenome\n\nAPI Key Options:\n- Provide directly via the api_key parameter\n- Or set ALPHAGENOME_API_KEY environment variable\n\nExample usage:\n- Predict regulatory effects of BRAF V600E mutation: chr7:140753336 A>T\n- Assess non-coding variant impact on gene expression\n- Evaluate promoter variants in specific tissues\n\nNote: This is an optional tool that enhances variant interpretation\nwith AI predictions. Standard annotations remain available via variant_getter.\n",
          "input_schema": {
            "properties": {
              "chromosome": {
                "description": "Chromosome (e.g., 'chr7', 'chrX')",
                "title": "Chromosome",
                "type": "string"
              },
              "position": {
                "description": "1-based genomic position of the variant",
                "title": "Position",
                "type": "integer"
              },
              "reference": {
                "description": "Reference allele(s) (e.g., 'A', 'ATG')",
                "title": "Reference",
                "type": "string"
              },
              "alternate": {
                "description": "Alternate allele(s) (e.g., 'T', 'A')",
                "title": "Alternate",
                "type": "string"
              },
              "interval_size": {
                "default": 131072,
                "description": "Size of genomic interval to analyze in bp (max 1,000,000)",
                "maximum": 1000000,
                "minimum": 2000,
                "title": "Interval Size",
                "type": "integer"
              },
              "tissue_types": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "UBERON ontology terms for tissue-specific predictions (e.g., 'UBERON:0002367' for external ear)",
                "title": "Tissue Types"
              },
              "significance_threshold": {
                "default": 0.5,
                "description": "Threshold for significant log2 fold changes (default: 0.5)",
                "maximum": 5.0,
                "minimum": 0.0,
                "title": "Significance Threshold",
                "type": "number"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "AlphaGenome API key. Check if user mentioned 'my AlphaGenome API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                "title": "Api Key"
              }
            },
            "required": [
              "chromosome",
              "position",
              "reference",
              "alternate"
            ],
            "title": "alphagenome_predictorArguments",
            "type": "object"
          }
        },
        "gene_getter": {
          "name": "gene_getter",
          "description": "Get detailed gene information from MyGene.info.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to understand your research goal!\n\nProvides real-time gene annotations including:\n- Official gene name and symbol\n- Gene summary/description\n- Aliases and alternative names\n- Gene type (protein-coding, etc.)\n- Links to external databases\n\nThis tool fetches CURRENT gene information from MyGene.info, ensuring\nyou always have the latest annotations and nomenclature.\n\nExample usage:\n- Get information about TP53 tumor suppressor\n- Look up BRAF kinase gene details\n- Find the official name for a gene by its alias\n\nNote: For genetic variants, use variant_searcher. For articles about genes, use article_searcher.\n",
          "input_schema": {
            "properties": {
              "gene_id_or_symbol": {
                "description": "Gene symbol (e.g., 'TP53', 'BRAF') or Entrez ID (e.g., '7157')",
                "title": "Gene Id Or Symbol",
                "type": "string"
              }
            },
            "required": [
              "gene_id_or_symbol"
            ],
            "title": "gene_getterArguments",
            "type": "object"
          }
        },
        "disease_getter": {
          "name": "disease_getter",
          "description": "Get detailed disease information from MyDisease.info.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to understand your research goal!\n\nProvides real-time disease annotations including:\n- Official disease name and definition\n- Disease synonyms and alternative names\n- Ontology mappings (MONDO, DOID, OMIM, etc.)\n- Associated phenotypes\n- Links to disease databases\n\nThis tool fetches CURRENT disease information from MyDisease.info, ensuring\nyou always have the latest ontology mappings and definitions.\n\nExample usage:\n- Get the definition of GIST (Gastrointestinal Stromal Tumor)\n- Look up synonyms for melanoma\n- Find the MONDO ID for a disease by name\n\nNote: For clinical trials about diseases, use trial_searcher. For articles about diseases, use article_searcher.\n",
          "input_schema": {
            "properties": {
              "disease_id_or_name": {
                "description": "Disease name (e.g., 'melanoma', 'lung cancer') or ontology ID (e.g., 'MONDO:0016575', 'DOID:1909')",
                "title": "Disease Id Or Name",
                "type": "string"
              }
            },
            "required": [
              "disease_id_or_name"
            ],
            "title": "disease_getterArguments",
            "type": "object"
          }
        },
        "drug_getter": {
          "name": "drug_getter",
          "description": "Get detailed drug/chemical information from MyChem.info.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to understand your research goal!\n\nThis tool provides comprehensive drug information including:\n- Chemical properties (formula, InChIKey)\n- Drug identifiers (DrugBank, ChEMBL, PubChem)\n- Trade names and brand names\n- Clinical indications\n- Mechanism of action\n- Pharmacology details\n- Links to drug databases\n\nThis tool fetches CURRENT drug information from MyChem.info, part of the\nBioThings suite, ensuring you always have the latest drug data.\n\nExample usage:\n- Get information about imatinib (Gleevec)\n- Look up details for DrugBank ID DB00619\n- Find the mechanism of action for pembrolizumab\n\nNote: For clinical trials about drugs, use trial_searcher. For articles about drugs, use article_searcher.\n",
          "input_schema": {
            "properties": {
              "drug_id_or_name": {
                "description": "Drug name (e.g., 'aspirin', 'imatinib') or ID (e.g., 'DB00945', 'CHEMBL941')",
                "title": "Drug Id Or Name",
                "type": "string"
              }
            },
            "required": [
              "drug_id_or_name"
            ],
            "title": "drug_getterArguments",
            "type": "object"
          }
        },
        "nci_organization_searcher": {
          "name": "nci_organization_searcher",
          "description": "Search for organizations in the NCI Clinical Trials database.\n\nSearches the National Cancer Institute's curated database of organizations\ninvolved in cancer clinical trials. This includes:\n- Academic medical centers\n- Community hospitals\n- Industry sponsors\n- Government facilities\n- Research networks\n\nRequires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\nIMPORTANT: To avoid API errors, always use city AND state together when searching by location.\nThe NCI API has limitations on broad searches.\n\nExample usage:\n- Find cancer centers in Boston, MA (city AND state)\n- Search for \"MD Anderson\" in Houston, TX\n- List academic organizations in Cleveland, OH\n- Search by organization name alone (without location)\n",
          "input_schema": {
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Organization name to search for (partial match supported)",
                "title": "Name"
              },
              "organization_type": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Type of organization (e.g., 'Academic', 'Industry', 'Government')",
                "title": "Organization Type"
              },
              "city": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "City where organization is located. IMPORTANT: Always use with state to avoid API errors",
                "title": "City"
              },
              "state": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "State/province code (e.g., 'CA', 'NY'). IMPORTANT: Always use with city to avoid API errors",
                "title": "State"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                "title": "Api Key"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "page_size": {
                "default": 20,
                "description": "Results per page",
                "maximum": 100,
                "minimum": 1,
                "title": "Page Size",
                "type": "integer"
              }
            },
            "title": "nci_organization_searcherArguments",
            "type": "object"
          }
        },
        "nci_organization_getter": {
          "name": "nci_organization_getter",
          "description": "Get detailed information about a specific organization from NCI.\n\nRetrieves comprehensive details about an organization including:\n- Full name and aliases\n- Address and contact information\n- Organization type and role\n- Associated clinical trials\n- Research focus areas\n\nRequires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\nExample usage:\n- Get details about a specific cancer center\n- Find contact information for trial sponsors\n- View organization's trial portfolio\n",
          "input_schema": {
            "properties": {
              "organization_id": {
                "description": "NCI organization ID (e.g., 'NCI-2011-03337')",
                "title": "Organization Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                "title": "Api Key"
              }
            },
            "required": [
              "organization_id"
            ],
            "title": "nci_organization_getterArguments",
            "type": "object"
          }
        },
        "nci_intervention_searcher": {
          "name": "nci_intervention_searcher",
          "description": "Search for interventions in the NCI Clinical Trials database.\n\nSearches the National Cancer Institute's curated database of interventions\nused in cancer clinical trials. This includes:\n- FDA-approved drugs\n- Investigational agents\n- Medical devices\n- Surgical procedures\n- Radiation therapies\n- Behavioral interventions\n\nRequires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\nExample usage:\n- Find all trials using pembrolizumab\n- Search for CAR-T cell therapies\n- List radiation therapy protocols\n- Find dietary interventions\n",
          "input_schema": {
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Intervention name to search for (e.g., 'pembrolizumab')",
                "title": "Name"
              },
              "intervention_type": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Type of intervention: 'Drug', 'Device', 'Biological', 'Procedure', 'Radiation', 'Behavioral', 'Genetic', 'Dietary', 'Other'",
                "title": "Intervention Type"
              },
              "synonyms": {
                "default": true,
                "description": "Include synonym matches in search",
                "title": "Synonyms",
                "type": "boolean"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                "title": "Api Key"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "page_size": {
                "anyOf": [
                  {
                    "maximum": 100,
                    "minimum": 1,
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Results per page. If not specified, returns all matching results.",
                "title": "Page Size"
              }
            },
            "title": "nci_intervention_searcherArguments",
            "type": "object"
          }
        },
        "nci_intervention_getter": {
          "name": "nci_intervention_getter",
          "description": "Get detailed information about a specific intervention from NCI.\n\nRetrieves comprehensive details about an intervention including:\n- Full name and synonyms\n- Intervention type and category\n- Mechanism of action (for drugs)\n- FDA approval status\n- Associated clinical trials\n- Combination therapies\n\nRequires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\nExample usage:\n- Get details about a specific drug\n- Find all trials using a device\n- View combination therapy protocols\n",
          "input_schema": {
            "properties": {
              "intervention_id": {
                "description": "NCI intervention ID (e.g., 'INT123456')",
                "title": "Intervention Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                "title": "Api Key"
              }
            },
            "required": [
              "intervention_id"
            ],
            "title": "nci_intervention_getterArguments",
            "type": "object"
          }
        },
        "nci_biomarker_searcher": {
          "name": "nci_biomarker_searcher",
          "description": "Search for biomarkers in the NCI Clinical Trials database.\n\nSearches for biomarkers used in clinical trial eligibility criteria.\nThis is essential for precision medicine trials that select patients\nbased on specific biomarker characteristics.\n\nBiomarker examples:\n- Gene mutations (e.g., BRAF V600E, EGFR T790M)\n- Protein expression (e.g., PD-L1 ≥ 50%, HER2 positive)\n- Gene fusions (e.g., ALK fusion, ROS1 fusion)\n- Other molecular markers (e.g., MSI-H, TMB-high)\n\nRequires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\nNote: Biomarker data availability may be limited in CTRP.\nResults focus on biomarkers used in trial eligibility criteria.\n\nExample usage:\n- Search for PD-L1 expression biomarkers\n- Find trials requiring EGFR mutations\n- Look up biomarkers tested by NGS\n- Search for HER2 expression markers\n",
          "input_schema": {
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Biomarker name to search for (e.g., 'PD-L1', 'EGFR mutation')",
                "title": "Name"
              },
              "biomarker_type": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Type of biomarker ('reference_gene' or 'branch')",
                "title": "Biomarker Type"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                "title": "Api Key"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "page_size": {
                "default": 20,
                "description": "Results per page",
                "maximum": 100,
                "minimum": 1,
                "title": "Page Size",
                "type": "integer"
              }
            },
            "title": "nci_biomarker_searcherArguments",
            "type": "object"
          }
        },
        "nci_disease_searcher": {
          "name": "nci_disease_searcher",
          "description": "Search NCI's controlled vocabulary of cancer conditions.\n\nSearches the National Cancer Institute's curated database of cancer\nconditions and diseases used in clinical trials. This is different from\nthe general disease_getter tool which uses MyDisease.info.\n\nNCI's disease vocabulary provides:\n- Official cancer terminology used in trials\n- Disease synonyms and alternative names\n- Hierarchical disease classifications\n- Standardized disease codes for trial matching\n\nRequires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\nExample usage:\n- Search for specific cancer types (e.g., \"melanoma\")\n- Find all lung cancer subtypes\n- Look up official names for disease synonyms\n- Get standardized disease terms for trial searches\n\nNote: This is specifically for NCI's cancer disease vocabulary.\nFor general disease information, use the disease_getter tool.\n",
          "input_schema": {
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Disease name to search for (partial match)",
                "title": "Name"
              },
              "include_synonyms": {
                "default": true,
                "description": "Include synonym matches in search",
                "title": "Include Synonyms",
                "type": "boolean"
              },
              "category": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Disease category/type filter",
                "title": "Category"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                "title": "Api Key"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "page_size": {
                "default": 20,
                "description": "Results per page",
                "maximum": 100,
                "minimum": 1,
                "title": "Page Size",
                "type": "integer"
              }
            },
            "title": "nci_disease_searcherArguments",
            "type": "object"
          }
        },
        "openfda_adverse_searcher": {
          "name": "openfda_adverse_searcher",
          "description": "Search FDA adverse event reports (FAERS) for drug safety information.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\nSearches FDA's Adverse Event Reporting System for:\n- Drug side effects and adverse reactions\n- Serious event reports (death, hospitalization, disability)\n- Safety signal patterns across patient populations\n\nNote: These reports do not establish causation - they are voluntary reports\nthat may contain incomplete or unverified information.\n",
          "input_schema": {
            "properties": {
              "drug": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Drug name to search for adverse events",
                "title": "Drug"
              },
              "reaction": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Adverse reaction term to search for",
                "title": "Reaction"
              },
              "serious": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Filter for serious events only",
                "title": "Serious"
              },
              "limit": {
                "default": 25,
                "description": "Maximum number of results",
                "maximum": 100,
                "minimum": 1,
                "title": "Limit",
                "type": "integer"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "title": "openfda_adverse_searcherArguments",
            "type": "object"
          }
        },
        "openfda_adverse_getter": {
          "name": "openfda_adverse_getter",
          "description": "Get detailed information for a specific FDA adverse event report.\n\nRetrieves complete details including:\n- Patient demographics and medical history\n- All drugs involved and dosages\n- Complete list of adverse reactions\n- Event narrative and outcomes\n- Reporter information\n",
          "input_schema": {
            "properties": {
              "report_id": {
                "description": "Safety report ID",
                "title": "Report Id",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "required": [
              "report_id"
            ],
            "title": "openfda_adverse_getterArguments",
            "type": "object"
          }
        },
        "openfda_label_searcher": {
          "name": "openfda_label_searcher",
          "description": "Search FDA drug product labels (SPL) for prescribing information.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\nSearches official FDA drug labels for:\n- Approved indications and usage\n- Dosage and administration guidelines\n- Contraindications and warnings\n- Drug interactions and adverse reactions\n- Special population considerations\n\nLabel sections include: indications, dosage, contraindications, warnings,\nadverse, interactions, pregnancy, pediatric, geriatric, overdose\n",
          "input_schema": {
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Drug name to search for",
                "title": "Name"
              },
              "indication": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Search for drugs indicated for this condition",
                "title": "Indication"
              },
              "boxed_warning": {
                "default": false,
                "description": "Filter for drugs with boxed warnings",
                "title": "Boxed Warning",
                "type": "boolean"
              },
              "section": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Specific label section (e.g., 'contraindications', 'warnings')",
                "title": "Section"
              },
              "limit": {
                "default": 25,
                "description": "Maximum number of results",
                "maximum": 100,
                "minimum": 1,
                "title": "Limit",
                "type": "integer"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "title": "openfda_label_searcherArguments",
            "type": "object"
          }
        },
        "openfda_label_getter": {
          "name": "openfda_label_getter",
          "description": "Get complete FDA drug label information by set ID.\n\nRetrieves the full prescribing information including:\n- Complete indications and usage text\n- Detailed dosing instructions\n- All warnings and precautions\n- Clinical pharmacology and studies\n- Manufacturing and storage information\n\nSpecify sections to retrieve specific parts, or leave empty for default key sections.\n",
          "input_schema": {
            "properties": {
              "set_id": {
                "description": "Label set ID",
                "title": "Set Id",
                "type": "string"
              },
              "sections": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Specific sections to retrieve (default: key sections)",
                "title": "Sections"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "required": [
              "set_id"
            ],
            "title": "openfda_label_getterArguments",
            "type": "object"
          }
        },
        "openfda_device_searcher": {
          "name": "openfda_device_searcher",
          "description": "Search FDA device adverse event reports (MAUDE) for medical device issues.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\nSearches FDA's device adverse event database for:\n- Device malfunctions and failures\n- Patient injuries related to devices\n- Genomic test and diagnostic device issues\n\nBy default, filters to genomic/diagnostic devices relevant to precision medicine.\nSet genomics_only=False to search all medical devices.\n",
          "input_schema": {
            "properties": {
              "device": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Device name to search for",
                "title": "Device"
              },
              "manufacturer": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Manufacturer name",
                "title": "Manufacturer"
              },
              "problem": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Device problem description",
                "title": "Problem"
              },
              "product_code": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "FDA product code",
                "title": "Product Code"
              },
              "genomics_only": {
                "default": true,
                "description": "Filter to genomic/diagnostic devices only",
                "title": "Genomics Only",
                "type": "boolean"
              },
              "limit": {
                "default": 25,
                "description": "Maximum number of results",
                "maximum": 100,
                "minimum": 1,
                "title": "Limit",
                "type": "integer"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "title": "openfda_device_searcherArguments",
            "type": "object"
          }
        },
        "openfda_device_getter": {
          "name": "openfda_device_getter",
          "description": "Get detailed information for a specific FDA device event report.\n\nRetrieves complete device event details including:\n- Device identification and specifications\n- Complete event narrative\n- Patient outcomes and impacts\n- Manufacturer analysis and actions\n- Remedial actions taken\n",
          "input_schema": {
            "properties": {
              "mdr_report_key": {
                "description": "MDR report key",
                "title": "Mdr Report Key",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "required": [
              "mdr_report_key"
            ],
            "title": "openfda_device_getterArguments",
            "type": "object"
          }
        },
        "openfda_approval_searcher": {
          "name": "openfda_approval_searcher",
          "description": "Search FDA drug approval records from Drugs@FDA database.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\nReturns information about:\n- Application numbers and sponsors\n- Brand and generic names\n- Product formulations and strengths\n- Marketing status and approval dates\n- Submission history\n\nUseful for verifying if a drug is FDA-approved and when.\n",
          "input_schema": {
            "properties": {
              "drug": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Drug name (brand or generic) to search for",
                "title": "Drug"
              },
              "application_number": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "NDA or BLA application number",
                "title": "Application Number"
              },
              "approval_year": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Year of approval (YYYY format)",
                "title": "Approval Year"
              },
              "limit": {
                "default": 25,
                "description": "Maximum number of results",
                "maximum": 100,
                "minimum": 1,
                "title": "Limit",
                "type": "integer"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "title": "openfda_approval_searcherArguments",
            "type": "object"
          }
        },
        "openfda_approval_getter": {
          "name": "openfda_approval_getter",
          "description": "Get detailed FDA drug approval information for a specific application.\n\nReturns comprehensive approval details including:\n- Full product list with dosage forms and strengths\n- Complete submission history\n- Marketing status timeline\n- Therapeutic equivalence codes\n- Pharmacologic class information\n",
          "input_schema": {
            "properties": {
              "application_number": {
                "description": "NDA or BLA application number",
                "title": "Application Number",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "required": [
              "application_number"
            ],
            "title": "openfda_approval_getterArguments",
            "type": "object"
          }
        },
        "openfda_recall_searcher": {
          "name": "openfda_recall_searcher",
          "description": "Search FDA drug recall records from the Enforcement database.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\nReturns recall information including:\n- Classification (Class I, II, or III)\n- Recall reason and description\n- Product identification\n- Distribution information\n- Recalling firm details\n- Current status\n\nClass I = most serious (death/serious harm)\nClass II = moderate (temporary/reversible harm)\nClass III = least serious (unlikely to cause harm)\n",
          "input_schema": {
            "properties": {
              "drug": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Drug name to search for recalls",
                "title": "Drug"
              },
              "recall_class": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Recall classification (1=most serious, 2=moderate, 3=least serious)",
                "title": "Recall Class"
              },
              "status": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Recall status (ongoing, completed, terminated)",
                "title": "Status"
              },
              "reason": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Search text in recall reason",
                "title": "Reason"
              },
              "since_date": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Show recalls after this date (YYYYMMDD format)",
                "title": "Since Date"
              },
              "limit": {
                "default": 25,
                "description": "Maximum number of results",
                "maximum": 100,
                "minimum": 1,
                "title": "Limit",
                "type": "integer"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "title": "openfda_recall_searcherArguments",
            "type": "object"
          }
        },
        "openfda_recall_getter": {
          "name": "openfda_recall_getter",
          "description": "Get detailed FDA drug recall information for a specific recall.\n\nReturns complete recall details including:\n- Full product description and code information\n- Complete reason for recall\n- Distribution pattern and locations\n- Quantity of product recalled\n- Firm information and actions taken\n- Timeline of recall events\n",
          "input_schema": {
            "properties": {
              "recall_number": {
                "description": "FDA recall number",
                "title": "Recall Number",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "required": [
              "recall_number"
            ],
            "title": "openfda_recall_getterArguments",
            "type": "object"
          }
        },
        "openfda_shortage_searcher": {
          "name": "openfda_shortage_searcher",
          "description": "Search FDA drug shortage records.\n\n⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\nReturns shortage information including:\n- Current shortage status\n- Shortage start and resolution dates\n- Reason for shortage\n- Therapeutic category\n- Manufacturer information\n- Estimated resolution timeline\n\nNote: Shortage data is cached and updated periodically.\nCheck FDA.gov for most current information.\n",
          "input_schema": {
            "properties": {
              "drug": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Drug name (generic or brand) to search",
                "title": "Drug"
              },
              "status": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Shortage status (current or resolved)",
                "title": "Status"
              },
              "therapeutic_category": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Therapeutic category (e.g., Oncology, Anti-infective)",
                "title": "Therapeutic Category"
              },
              "limit": {
                "default": 25,
                "description": "Maximum number of results",
                "maximum": 100,
                "minimum": 1,
                "title": "Limit",
                "type": "integer"
              },
              "page": {
                "default": 1,
                "description": "Page number (1-based)",
                "minimum": 1,
                "title": "Page",
                "type": "integer"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "title": "openfda_shortage_searcherArguments",
            "type": "object"
          }
        },
        "openfda_shortage_getter": {
          "name": "openfda_shortage_getter",
          "description": "Get detailed FDA drug shortage information for a specific drug.\n\nReturns comprehensive shortage details including:\n- Complete timeline of shortage\n- Detailed reason for shortage\n- All affected manufacturers\n- Alternative products if available\n- Resolution status and estimates\n- Additional notes and recommendations\n\nData is updated periodically from FDA shortage database.\n",
          "input_schema": {
            "properties": {
              "drug": {
                "description": "Drug name (generic or brand)",
                "title": "Drug",
                "type": "string"
              },
              "api_key": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                "title": "Api Key"
              }
            },
            "required": [
              "drug"
            ],
            "title": "openfda_shortage_getterArguments",
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Call for Papers": {
      "name": "Call for Papers",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "server.py"
      ],
      "connection_status": "success",
      "tools": {
        "get_events": {
          "name": "get_events",
          "description": "Search for conferences matching specific keywords.",
          "input_schema": {
            "properties": {
              "keywords": {
                "title": "Keywords",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "keywords"
            ],
            "title": "get_eventsArguments",
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Car Price Evaluator": {
      "name": "Car Price Evaluator",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "server.py"
      ],
      "connection_status": "success",
      "tools": {
        "get_car_brands": {
          "name": "get_car_brands",
          "description": "\n    Get all available car brands from FIPE API.\n    \n    Returns:\n        List of car brands with their codes and names\n    ",
          "input_schema": {
            "properties": {},
            "title": "get_car_brandsArguments",
            "type": "object"
          }
        },
        "search_car_price": {
          "name": "search_car_price",
          "description": "\n    Search for car models and prices by brand name.\n    \n    Args:\n        brand_name: The car brand name to search for (e.g., \"Toyota\", \"Honda\", \"Ford\")\n    \n    Returns:\n        Car models with current market prices from FIPE database\n    ",
          "input_schema": {
            "properties": {
              "brand_name": {
                "title": "Brand Name",
                "type": "string"
              }
            },
            "required": [
              "brand_name"
            ],
            "title": "search_car_priceArguments",
            "type": "object"
          }
        },
        "get_vehicles_by_type": {
          "name": "get_vehicles_by_type",
          "description": "\n    Get vehicles by type (cars, motorcycles, trucks).\n    \n    Args:\n        vehicle_type: Type of vehicles to fetch (\"carros\"/\"cars\", \"motos\"/\"motorcycles\", \"caminhoes\"/\"trucks\")\n    \n    Returns:\n        List of vehicle brands for the specified type\n    ",
          "input_schema": {
            "properties": {
              "vehicle_type": {
                "default": "carros",
                "title": "Vehicle Type",
                "type": "string"
              }
            },
            "title": "get_vehicles_by_typeArguments",
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Context7": {
      "name": "Context7",
      "icon": "",
      "description": "",
      "command": [
        "node",
        "dist/index.js"
      ],
      "connection_status": "success",
      "tools": {
        "resolve-library-id": {
          "name": "resolve-library-id",
          "description": "Resolves a package/product name to a Context7-compatible library ID and returns a list of matching libraries.\n\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.\n\nSelection Process:\n1. Analyze the query to understand what library/package the user is looking for\n2. Return the most relevant match based on:\n- Name similarity to the query (exact matches prioritized)\n- Description relevance to the query's intent\n- Documentation coverage (prioritize libraries with higher Code Snippet counts)\n- Trust score (consider libraries with scores of 7-10 more authoritative)\n\nResponse Format:\n- Return the selected library ID in a clearly marked section\n- Provide a brief explanation for why this library was chosen\n- If multiple good matches exist, acknowledge this but proceed with the most relevant one\n- If no good matches exist, clearly state this and suggest query refinements\n\nFor ambiguous queries, request clarification before proceeding with a best-guess match.",
          "input_schema": {
            "type": "object",
            "properties": {
              "libraryName": {
                "type": "string",
                "description": "Library name to search for and retrieve a Context7-compatible library ID."
              }
            },
            "required": [
              "libraryName"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "get-library-docs": {
          "name": "get-library-docs",
          "description": "Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool, UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.",
          "input_schema": {
            "type": "object",
            "properties": {
              "context7CompatibleLibraryID": {
                "type": "string",
                "description": "Exact Context7-compatible library ID (e.g., '/mongodb/docs', '/vercel/next.js', '/supabase/supabase', '/vercel/next.js/v14.3.0-canary.87') retrieved from 'resolve-library-id' or directly from user query in the format '/org/project' or '/org/project/version'."
              },
              "topic": {
                "type": "string",
                "description": "Topic to focus documentation on (e.g., 'hooks', 'routing')."
              },
              "tokens": {
                "type": "number",
                "description": "Maximum number of tokens of documentation to retrieve (default: 10000). Higher values provide more context but consume more tokens."
              }
            },
            "required": [
              "context7CompatibleLibraryID"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "attempts": 1
    },
    "DEX Paprika": {
      "name": "DEX Paprika",
      "icon": "",
      "description": "",
      "command": [
        "node",
        "src/index.js"
      ],
      "connection_status": "success",
      "tools": {
        "getNetworks": {
          "name": "getNetworks",
          "description": "REQUIRED FIRST STEP: Get all supported blockchain networks. Always call this first to see available networks before using any network-specific functions. Returns network IDs like \"ethereum\", \"solana\", etc.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getNetworkDexes": {
          "name": "getNetworkDexes",
          "description": "Get available DEXes on a specific network. First call getNetworks to see valid network IDs.",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Network ID from getNetworks (e.g., \"ethereum\", \"solana\")"
              },
              "page": {
                "type": "number",
                "default": 0,
                "description": "Page number for pagination"
              },
              "limit": {
                "type": "number",
                "default": 10,
                "description": "Number of items per page"
              }
            },
            "required": [
              "network"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getNetworkPools": {
          "name": "getNetworkPools",
          "description": "PRIMARY POOL FUNCTION: Get top liquidity pools on a specific network. This is the MAIN way to get pool data - there is NO global pools function. Use this instead of any \"getTopPools\" or \"getAllPools\" concepts.",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Network ID from getNetworks (required) - e.g., \"ethereum\", \"solana\""
              },
              "page": {
                "type": "number",
                "default": 0,
                "description": "Page number for pagination"
              },
              "limit": {
                "type": "number",
                "default": 10,
                "description": "Number of items per page (max 100)"
              },
              "sort": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ],
                "default": "desc",
                "description": "Sort order"
              },
              "orderBy": {
                "type": "string",
                "enum": [
                  "volume_usd",
                  "price_usd",
                  "transactions",
                  "last_price_change_usd_24h",
                  "created_at"
                ],
                "default": "volume_usd",
                "description": "Field to order by"
              }
            },
            "required": [
              "network"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getDexPools": {
          "name": "getDexPools",
          "description": "Get pools from a specific DEX on a network. First use getNetworks, then getNetworkDexes to find valid DEX IDs.",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Network ID from getNetworks (e.g., \"ethereum\", \"solana\")"
              },
              "dex": {
                "type": "string",
                "description": "DEX identifier from getNetworkDexes (e.g., \"uniswap_v3\")"
              },
              "page": {
                "type": "number",
                "default": 0,
                "description": "Page number for pagination"
              },
              "limit": {
                "type": "number",
                "default": 10,
                "description": "Number of items per page (max 100)"
              },
              "sort": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ],
                "default": "desc",
                "description": "Sort order"
              },
              "orderBy": {
                "type": "string",
                "enum": [
                  "volume_usd",
                  "price_usd",
                  "transactions",
                  "last_price_change_usd_24h",
                  "created_at"
                ],
                "default": "volume_usd",
                "description": "Field to order by"
              }
            },
            "required": [
              "network",
              "dex"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getPoolDetails": {
          "name": "getPoolDetails",
          "description": "Get detailed information about a specific pool. Requires network ID from getNetworks and a pool address.",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Network ID from getNetworks (e.g., \"ethereum\", \"solana\")"
              },
              "poolAddress": {
                "type": "string",
                "description": "Pool address or identifier"
              },
              "inversed": {
                "type": "boolean",
                "default": false,
                "description": "Whether to invert the price ratio"
              }
            },
            "required": [
              "network",
              "poolAddress"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getTokenDetails": {
          "name": "getTokenDetails",
          "description": "Get detailed information about a specific token on a network. First use getNetworks to get valid network IDs.",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Network ID from getNetworks (e.g., \"ethereum\", \"solana\")"
              },
              "tokenAddress": {
                "type": "string",
                "description": "Token address or identifier"
              }
            },
            "required": [
              "network",
              "tokenAddress"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getTokenPools": {
          "name": "getTokenPools",
          "description": "Get liquidity pools containing a specific token on a network. Great for finding where a token is traded.",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Network ID from getNetworks (e.g., \"ethereum\", \"solana\")"
              },
              "tokenAddress": {
                "type": "string",
                "description": "Token address or identifier"
              },
              "page": {
                "type": "number",
                "default": 0,
                "description": "Page number for pagination"
              },
              "limit": {
                "type": "number",
                "default": 10,
                "description": "Number of items per page (max 100)"
              },
              "sort": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ],
                "default": "desc",
                "description": "Sort order"
              },
              "orderBy": {
                "type": "string",
                "enum": [
                  "volume_usd",
                  "price_usd",
                  "transactions",
                  "last_price_change_usd_24h",
                  "created_at"
                ],
                "default": "volume_usd",
                "description": "Field to order by"
              },
              "reorder": {
                "type": "boolean",
                "description": "If true, reorders the pool so that the specified token becomes the primary token for all metrics"
              },
              "address": {
                "type": "string",
                "description": "Filter pools that contain this additional token address"
              }
            },
            "required": [
              "network",
              "tokenAddress"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getPoolOHLCV": {
          "name": "getPoolOHLCV",
          "description": "Get historical price data (OHLCV) for a pool - essential for price analysis, backtesting, and visualization. Requires network and pool address.",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Network ID from getNetworks (e.g., \"ethereum\", \"solana\")"
              },
              "poolAddress": {
                "type": "string",
                "description": "Pool address or identifier"
              },
              "start": {
                "type": "string",
                "description": "Start time for historical data (Unix timestamp, RFC3339 timestamp, or yyyy-mm-dd format)"
              },
              "end": {
                "type": "string",
                "description": "End time for historical data (max 1 year from start)"
              },
              "limit": {
                "type": "number",
                "default": 1,
                "description": "Number of data points to retrieve (max 366) - adjust for different analysis needs"
              },
              "interval": {
                "type": "string",
                "default": "24h",
                "description": "Interval granularity: 1m, 5m, 10m, 15m, 30m, 1h, 6h, 12h, 24h"
              },
              "inversed": {
                "type": "boolean",
                "default": false,
                "description": "Whether to invert the price ratio for alternative pair perspective (e.g., ETH/USDC vs USDC/ETH)"
              }
            },
            "required": [
              "network",
              "poolAddress",
              "start"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getPoolTransactions": {
          "name": "getPoolTransactions",
          "description": "Get recent transactions for a specific pool. Shows swaps, adds, removes. Requires network and pool address.",
          "input_schema": {
            "type": "object",
            "properties": {
              "network": {
                "type": "string",
                "description": "Network ID from getNetworks (e.g., \"ethereum\", \"solana\")"
              },
              "poolAddress": {
                "type": "string",
                "description": "Pool address or identifier"
              },
              "page": {
                "type": "number",
                "default": 0,
                "description": "Page number for pagination (up to 100 pages)"
              },
              "limit": {
                "type": "number",
                "default": 10,
                "description": "Number of items per page (max 100)"
              },
              "cursor": {
                "type": "string",
                "description": "Transaction ID used for cursor-based pagination"
              }
            },
            "required": [
              "network",
              "poolAddress"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "search": {
          "name": "search",
          "description": "Search across ALL networks for tokens, pools, and DEXes by name, symbol, or address. Good starting point when you don't know the specific network.",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search term (e.g., \"uniswap\", \"bitcoin\", or a token address)"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getStats": {
          "name": "getStats",
          "description": "Get high-level statistics about the DexPaprika ecosystem: total networks, DEXes, pools, and tokens available.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "attempts": 1
    },
    "FruityVice": {
      "name": "FruityVice",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "server.py"
      ],
      "connection_status": "success",
      "tools": {
        "get_fruit_nutrition": {
          "name": "get_fruit_nutrition",
          "description": "\n    Get nutritional information and details for a given fruit name.\n\n    Args:\n        fruit_name: The name of the fruit to get information about (e.g., \"apple\", \"banana\", \"orange\")\n\n    Returns:\n        Dictionary containing fruit information including name, family, genus, order, and nutritional data\n    ",
          "input_schema": {
            "properties": {
              "fruit_name": {
                "title": "Fruit Name",
                "type": "string"
              }
            },
            "required": [
              "fruit_name"
            ],
            "title": "get_fruit_nutritionArguments",
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Game Trends": {
      "name": "Game Trends",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "server.py"
      ],
      "connection_status": "success",
      "tools": {
        "get_steam_trending_games": {
          "name": "get_steam_trending_games",
          "description": "Get real trending games from Steam platform with live data from multiple sources.",
          "input_schema": {
            "properties": {},
            "type": "object"
          }
        },
        "get_steam_top_sellers": {
          "name": "get_steam_top_sellers",
          "description": "Get real top selling games from Steam platform with live sales data.",
          "input_schema": {
            "properties": {},
            "type": "object"
          }
        },
        "get_steam_most_played": {
          "name": "get_steam_most_played",
          "description": "Get real-time most played games from Steam with live player statistics from SteamCharts.",
          "input_schema": {
            "properties": {},
            "type": "object"
          }
        },
        "get_epic_free_games": {
          "name": "get_epic_free_games",
          "description": "Get current and upcoming free games from Epic Games Store with real promotion data.",
          "input_schema": {
            "properties": {},
            "type": "object"
          }
        },
        "get_epic_trending_games": {
          "name": "get_epic_trending_games",
          "description": "Get trending games from Epic Games Store.",
          "input_schema": {
            "properties": {},
            "type": "object"
          }
        },
        "get_all_trending_games": {
          "name": "get_all_trending_games",
          "description": "Get comprehensive real-time gaming data from all platforms (Steam and Epic Games).",
          "input_schema": {
            "properties": {},
            "type": "object"
          }
        },
        "get_api_health": {
          "name": "get_api_health",
          "description": "Check the health status of the Gaming Trend Analytics API.",
          "input_schema": {
            "properties": {},
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Huge Icons": {
      "name": "Huge Icons",
      "icon": "",
      "description": "",
      "command": [
        "node",
        "build/index.js"
      ],
      "connection_status": "success",
      "tools": {
        "list_icons": {
          "name": "list_icons",
          "description": "Get a list of all available Hugeicons icons",
          "input_schema": {
            "type": "object",
            "properties": {},
            "required": []
          }
        },
        "search_icons": {
          "name": "search_icons",
          "description": "Search for icons by name or tags. Use commas to search for multiple icons (e.g. 'home, notification, settings')",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query to find relevant icons. Separate multiple searches with commas"
              }
            },
            "required": [
              "query"
            ]
          }
        },
        "get_platform_usage": {
          "name": "get_platform_usage",
          "description": "Get platform-specific usage instructions for Hugeicons",
          "input_schema": {
            "type": "object",
            "properties": {
              "platform": {
                "type": "string",
                "description": "Platform name (react, vue, angular, svelte, react-native, flutter)",
                "enum": [
                  "react",
                  "vue",
                  "angular",
                  "svelte",
                  "react-native",
                  "flutter"
                ]
              }
            },
            "required": [
              "platform"
            ]
          }
        }
      },
      "attempts": 1
    },
    "Hugging Face": {
      "name": "Hugging Face",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "src/huggingface/server.py"
      ],
      "connection_status": "success",
      "tools": {
        "search-models": {
          "name": "search-models",
          "description": "Search for models on Hugging Face Hub",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search term (e.g., 'bert', 'gpt')"
              },
              "author": {
                "type": "string",
                "description": "Filter by author/organization (e.g., 'huggingface', 'google')"
              },
              "tags": {
                "type": "string",
                "description": "Filter by tags (e.g., 'text-classification', 'translation')"
              },
              "limit": {
                "type": "integer",
                "description": "Maximum number of results to return"
              }
            }
          }
        },
        "get-model-info": {
          "name": "get-model-info",
          "description": "Get detailed information about a specific model",
          "input_schema": {
            "type": "object",
            "properties": {
              "model_id": {
                "type": "string",
                "description": "The ID of the model (e.g., 'google/bert-base-uncased')"
              }
            },
            "required": [
              "model_id"
            ]
          }
        },
        "search-datasets": {
          "name": "search-datasets",
          "description": "Search for datasets on Hugging Face Hub",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search term"
              },
              "author": {
                "type": "string",
                "description": "Filter by author/organization"
              },
              "tags": {
                "type": "string",
                "description": "Filter by tags"
              },
              "limit": {
                "type": "integer",
                "description": "Maximum number of results to return"
              }
            }
          }
        },
        "get-dataset-info": {
          "name": "get-dataset-info",
          "description": "Get detailed information about a specific dataset",
          "input_schema": {
            "type": "object",
            "properties": {
              "dataset_id": {
                "type": "string",
                "description": "The ID of the dataset (e.g., 'squad')"
              }
            },
            "required": [
              "dataset_id"
            ]
          }
        },
        "search-spaces": {
          "name": "search-spaces",
          "description": "Search for Spaces on Hugging Face Hub",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search term"
              },
              "author": {
                "type": "string",
                "description": "Filter by author/organization"
              },
              "tags": {
                "type": "string",
                "description": "Filter by tags"
              },
              "sdk": {
                "type": "string",
                "description": "Filter by SDK (e.g., 'streamlit', 'gradio', 'docker')"
              },
              "limit": {
                "type": "integer",
                "description": "Maximum number of results to return"
              }
            }
          }
        },
        "get-space-info": {
          "name": "get-space-info",
          "description": "Get detailed information about a specific Space",
          "input_schema": {
            "type": "object",
            "properties": {
              "space_id": {
                "type": "string",
                "description": "The ID of the Space (e.g., 'huggingface/diffusers-demo')"
              }
            },
            "required": [
              "space_id"
            ]
          }
        },
        "get-paper-info": {
          "name": "get-paper-info",
          "description": "Get information about a specific paper on Hugging Face",
          "input_schema": {
            "type": "object",
            "properties": {
              "arxiv_id": {
                "type": "string",
                "description": "The arXiv ID of the paper (e.g., '1810.04805')"
              }
            },
            "required": [
              "arxiv_id"
            ]
          }
        },
        "get-daily-papers": {
          "name": "get-daily-papers",
          "description": "Get the list of daily papers curated by Hugging Face",
          "input_schema": {
            "type": "object",
            "properties": {}
          }
        },
        "search-collections": {
          "name": "search-collections",
          "description": "Search for collections on Hugging Face Hub",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Filter by owner"
              },
              "item": {
                "type": "string",
                "description": "Filter by item (e.g., 'models/teknium/OpenHermes-2.5-Mistral-7B')"
              },
              "query": {
                "type": "string",
                "description": "Search term for titles and descriptions"
              },
              "limit": {
                "type": "integer",
                "description": "Maximum number of results to return"
              }
            }
          }
        },
        "get-collection-info": {
          "name": "get-collection-info",
          "description": "Get detailed information about a specific collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "namespace": {
                "type": "string",
                "description": "The namespace of the collection (user or organization)"
              },
              "collection_id": {
                "type": "string",
                "description": "The ID part of the collection"
              }
            },
            "required": [
              "namespace",
              "collection_id"
            ]
          }
        }
      },
      "attempts": 1
    },
    "Math MCP": {
      "name": "Math MCP",
      "icon": "",
      "description": "",
      "command": [
        "node",
        "build/index.js"
      ],
      "connection_status": "success",
      "tools": {
        "add": {
          "name": "add",
          "description": "Adds two numbers together",
          "input_schema": {
            "type": "object",
            "properties": {
              "firstNumber": {
                "type": "number",
                "description": "The first addend"
              },
              "secondNumber": {
                "type": "number",
                "description": "The second addend"
              }
            },
            "required": [
              "firstNumber",
              "secondNumber"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "subtract": {
          "name": "subtract",
          "description": "Subtracts the second number from the first number",
          "input_schema": {
            "type": "object",
            "properties": {
              "minuend": {
                "type": "number",
                "description": "The number to subtract from (minuend)"
              },
              "subtrahend": {
                "type": "number",
                "description": "The number being subtracted (subtrahend)"
              }
            },
            "required": [
              "minuend",
              "subtrahend"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "multiply": {
          "name": "multiply",
          "description": "Multiplies two numbers together",
          "input_schema": {
            "type": "object",
            "properties": {
              "firstNumber": {
                "type": "number",
                "description": "The first number"
              },
              "SecondNumber": {
                "type": "number",
                "description": "The second number"
              }
            },
            "required": [
              "firstNumber",
              "SecondNumber"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "division": {
          "name": "division",
          "description": "Divides the first number by the second number",
          "input_schema": {
            "type": "object",
            "properties": {
              "numerator": {
                "type": "number",
                "description": "The number being divided (numerator)"
              },
              "denominator": {
                "type": "number",
                "description": "The number to divide by (denominator)"
              }
            },
            "required": [
              "numerator",
              "denominator"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "sum": {
          "name": "sum",
          "description": "Adds any number of numbers together",
          "input_schema": {
            "type": "object",
            "properties": {
              "numbers": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "minItems": 1,
                "description": "Array of numbers to sum"
              }
            },
            "required": [
              "numbers"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "mean": {
          "name": "mean",
          "description": "Calculates the arithmetic mean of a list of numbers",
          "input_schema": {
            "type": "object",
            "properties": {
              "numbers": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "minItems": 1,
                "description": "Array of numbers to find the mean of"
              }
            },
            "required": [
              "numbers"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "median": {
          "name": "median",
          "description": "Calculates the median of a list of numbers",
          "input_schema": {
            "type": "object",
            "properties": {
              "numbers": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "minItems": 1,
                "description": "Array of numbers to find the median of"
              }
            },
            "required": [
              "numbers"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "mode": {
          "name": "mode",
          "description": "Finds the most common number in a list of numbers",
          "input_schema": {
            "type": "object",
            "properties": {
              "numbers": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "Array of numbers to find the mode of"
              }
            },
            "required": [
              "numbers"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "min": {
          "name": "min",
          "description": "Finds the minimum value from a list of numbers",
          "input_schema": {
            "type": "object",
            "properties": {
              "numbers": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "Array of numbers to find the minimum of"
              }
            },
            "required": [
              "numbers"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "max": {
          "name": "max",
          "description": "Finds the maximum value from a list of numbers",
          "input_schema": {
            "type": "object",
            "properties": {
              "numbers": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "Array of numbers to find the maximum of"
              }
            },
            "required": [
              "numbers"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "floor": {
          "name": "floor",
          "description": "Rounds a number down to the nearest integer",
          "input_schema": {
            "type": "object",
            "properties": {
              "number": {
                "type": "number",
                "description": "The number to round down"
              }
            },
            "required": [
              "number"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "ceiling": {
          "name": "ceiling",
          "description": "Rounds a number up to the nearest integer",
          "input_schema": {
            "type": "object",
            "properties": {
              "number": {
                "type": "number",
                "description": "The number to round up"
              }
            },
            "required": [
              "number"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "round": {
          "name": "round",
          "description": "Rounds a number to the nearest integer",
          "input_schema": {
            "type": "object",
            "properties": {
              "number": {
                "type": "number",
                "description": "The number to round"
              }
            },
            "required": [
              "number"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "attempts": 1
    },
    "NixOS": {
      "name": "NixOS",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "mcp_nixos/server.py"
      ],
      "connection_status": "success",
      "tools": {
        "nixos_search": {
          "name": "nixos_search",
          "description": "Search NixOS packages, options, or programs.\n\n    Args:\n        query: Search term to look for\n        search_type: Type of search - \"packages\", \"options\", \"programs\", or \"flakes\"\n        limit: Maximum number of results to return (1-100)\n        channel: NixOS channel to search in (e.g., \"unstable\", \"stable\", \"25.05\")\n\n    Returns:\n        Plain text results with bullet points or error message\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "search_type": {
                "default": "packages",
                "title": "Search Type",
                "type": "string"
              },
              "limit": {
                "default": 20,
                "title": "Limit",
                "type": "integer"
              },
              "channel": {
                "default": "unstable",
                "title": "Channel",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "title": "nixos_searchArguments",
            "type": "object"
          }
        },
        "nixos_info": {
          "name": "nixos_info",
          "description": "Get detailed info about a NixOS package or option.\n\n    Args:\n        name: Name of the package or option to look up\n        type: Type of lookup - \"package\" or \"option\"\n        channel: NixOS channel to search in (e.g., \"unstable\", \"stable\", \"25.05\")\n\n    Returns:\n        Plain text details about the package/option or error message\n    ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              },
              "type": {
                "default": "package",
                "title": "Type",
                "type": "string"
              },
              "channel": {
                "default": "unstable",
                "title": "Channel",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "nixos_infoArguments",
            "type": "object"
          }
        },
        "nixos_channels": {
          "name": "nixos_channels",
          "description": "List available NixOS channels with their status.\n\n    Returns:\n        Plain text list showing channel names, versions, and availability\n    ",
          "input_schema": {
            "properties": {},
            "title": "nixos_channelsArguments",
            "type": "object"
          }
        },
        "nixos_stats": {
          "name": "nixos_stats",
          "description": "Get NixOS statistics for a channel.\n\n    Args:\n        channel: NixOS channel to get stats for (e.g., \"unstable\", \"stable\", \"25.05\")\n\n    Returns:\n        Plain text statistics including package/option counts\n    ",
          "input_schema": {
            "properties": {
              "channel": {
                "default": "unstable",
                "title": "Channel",
                "type": "string"
              }
            },
            "title": "nixos_statsArguments",
            "type": "object"
          }
        },
        "home_manager_search": {
          "name": "home_manager_search",
          "description": "Search Home Manager configuration options.\n\n    Searches through available Home Manager options by name and description.\n\n    Args:\n        query: The search query string to match against option names and descriptions\n        limit: Maximum number of results to return (default: 20, max: 100)\n\n    Returns:\n        Plain text list of matching options with name, type, and description\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "limit": {
                "default": 20,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "title": "home_manager_searchArguments",
            "type": "object"
          }
        },
        "home_manager_info": {
          "name": "home_manager_info",
          "description": "Get detailed information about a specific Home Manager option.\n\n    Requires an exact option name match. If not found, suggests similar options.\n\n    Args:\n        name: The exact option name (e.g., 'programs.git.enable')\n\n    Returns:\n        Plain text with option details (name, type, description) or error with suggestions\n    ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "home_manager_infoArguments",
            "type": "object"
          }
        },
        "home_manager_stats": {
          "name": "home_manager_stats",
          "description": "Get statistics about Home Manager options.\n\n    Retrieves overall statistics including total options, categories, and top categories.\n\n    Returns:\n        Plain text summary with total options, category count, and top 5 categories\n    ",
          "input_schema": {
            "properties": {},
            "title": "home_manager_statsArguments",
            "type": "object"
          }
        },
        "home_manager_list_options": {
          "name": "home_manager_list_options",
          "description": "List all Home Manager option categories.\n\n    Enumerates all top-level categories with their option counts.\n\n    Returns:\n        Plain text list of categories sorted alphabetically with option counts\n    ",
          "input_schema": {
            "properties": {},
            "title": "home_manager_list_optionsArguments",
            "type": "object"
          }
        },
        "home_manager_options_by_prefix": {
          "name": "home_manager_options_by_prefix",
          "description": "Get Home Manager options matching a specific prefix.\n\n    Useful for browsing options under a category or finding exact option names.\n\n    Args:\n        option_prefix: The prefix to match (e.g., 'programs.git' or 'services')\n\n    Returns:\n        Plain text list of options with the given prefix, including descriptions\n    ",
          "input_schema": {
            "properties": {
              "option_prefix": {
                "title": "Option Prefix",
                "type": "string"
              }
            },
            "required": [
              "option_prefix"
            ],
            "title": "home_manager_options_by_prefixArguments",
            "type": "object"
          }
        },
        "darwin_search": {
          "name": "darwin_search",
          "description": "Search nix-darwin (macOS) configuration options.\n\n    Searches through available nix-darwin options by name and description.\n\n    Args:\n        query: The search query string to match against option names and descriptions\n        limit: Maximum number of results to return (default: 20, max: 100)\n\n    Returns:\n        Plain text list of matching options with name, type, and description\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "limit": {
                "default": 20,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "title": "darwin_searchArguments",
            "type": "object"
          }
        },
        "darwin_info": {
          "name": "darwin_info",
          "description": "Get detailed information about a specific nix-darwin option.\n\n    Requires an exact option name match. If not found, suggests similar options.\n\n    Args:\n        name: The exact option name (e.g., 'system.defaults.dock.autohide')\n\n    Returns:\n        Plain text with option details (name, type, description) or error with suggestions\n    ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "darwin_infoArguments",
            "type": "object"
          }
        },
        "darwin_stats": {
          "name": "darwin_stats",
          "description": "Get statistics about nix-darwin options.\n\n    Retrieves overall statistics including total options, categories, and top categories.\n\n    Returns:\n        Plain text summary with total options, category count, and top 5 categories\n    ",
          "input_schema": {
            "properties": {},
            "title": "darwin_statsArguments",
            "type": "object"
          }
        },
        "darwin_list_options": {
          "name": "darwin_list_options",
          "description": "List all nix-darwin option categories.\n\n    Enumerates all top-level categories with their option counts.\n\n    Returns:\n        Plain text list of categories sorted alphabetically with option counts\n    ",
          "input_schema": {
            "properties": {},
            "title": "darwin_list_optionsArguments",
            "type": "object"
          }
        },
        "darwin_options_by_prefix": {
          "name": "darwin_options_by_prefix",
          "description": "Get nix-darwin options matching a specific prefix.\n\n    Useful for browsing options under a category or finding exact option names.\n\n    Args:\n        option_prefix: The prefix to match (e.g., 'system.defaults' or 'services')\n\n    Returns:\n        Plain text list of options with the given prefix, including descriptions\n    ",
          "input_schema": {
            "properties": {
              "option_prefix": {
                "title": "Option Prefix",
                "type": "string"
              }
            },
            "required": [
              "option_prefix"
            ],
            "title": "darwin_options_by_prefixArguments",
            "type": "object"
          }
        },
        "nixos_flakes_stats": {
          "name": "nixos_flakes_stats",
          "description": "Get statistics about available NixOS flakes.\n\n    Retrieves statistics from the flake search index including total packages,\n    unique repositories, flake types, and top contributors.\n\n    Returns:\n        Plain text summary with flake statistics and top contributors\n    ",
          "input_schema": {
            "properties": {},
            "title": "nixos_flakes_statsArguments",
            "type": "object"
          }
        },
        "nixos_flakes_search": {
          "name": "nixos_flakes_search",
          "description": "Search NixOS flakes by name, description, owner, or repository.\n\n    Searches the flake index for community-contributed packages and configurations.\n    Flakes are indexed separately from official packages.\n\n    Args:\n        query: The search query (flake name, description, owner, or repository)\n        limit: Maximum number of results to return (default: 20, max: 100)\n        channel: Ignored - flakes use a separate indexing system\n\n    Returns:\n        Plain text list of unique flakes with their packages and metadata\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "limit": {
                "default": 20,
                "title": "Limit",
                "type": "integer"
              },
              "channel": {
                "default": "unstable",
                "title": "Channel",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "title": "nixos_flakes_searchArguments",
            "type": "object"
          }
        },
        "nixhub_package_versions": {
          "name": "nixhub_package_versions",
          "description": "Get version history and nixpkgs commit hashes for a specific package from NixHub.io.\n\n    Use this tool when users need specific package versions or commit hashes for reproducible builds.\n\n    Args:\n        package_name: Name of the package to query (e.g., \"firefox\", \"python\")\n        limit: Maximum number of versions to return (default: 10, max: 50)\n\n    Returns:\n        Plain text with package info and version history including commit hashes\n    ",
          "input_schema": {
            "properties": {
              "package_name": {
                "title": "Package Name",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "package_name"
            ],
            "title": "nixhub_package_versionsArguments",
            "type": "object"
          }
        },
        "nixhub_find_version": {
          "name": "nixhub_find_version",
          "description": "Find a specific version of a package in NixHub with smart search.\n\n    Automatically searches with increasing limits to find the requested version.\n\n    Args:\n        package_name: Name of the package to query (e.g., \"ruby\", \"python\")\n        version: Specific version to find (e.g., \"2.6.7\", \"3.5.9\")\n\n    Returns:\n        Plain text with version info and commit hash if found, or helpful message if not\n    ",
          "input_schema": {
            "properties": {
              "package_name": {
                "title": "Package Name",
                "type": "string"
              },
              "version": {
                "title": "Version",
                "type": "string"
              }
            },
            "required": [
              "package_name",
              "version"
            ],
            "title": "nixhub_find_versionArguments",
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "OSINT Intelligence": {
      "name": "OSINT Intelligence",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "mcp_osint_server/mcp_osint_server/main.py"
      ],
      "connection_status": "success",
      "tools": {
        "whois_lookup": {
          "name": "whois_lookup",
          "description": "",
          "input_schema": {
            "properties": {
              "target": {
                "title": "Target",
                "type": "string"
              }
            },
            "required": [
              "target"
            ],
            "type": "object"
          }
        },
        "nmap_scan": {
          "name": "nmap_scan",
          "description": "",
          "input_schema": {
            "properties": {
              "target": {
                "title": "Target",
                "type": "string"
              }
            },
            "required": [
              "target"
            ],
            "type": "object"
          }
        },
        "dnsrecon_lookup": {
          "name": "dnsrecon_lookup",
          "description": "",
          "input_schema": {
            "properties": {
              "target": {
                "title": "Target",
                "type": "string"
              }
            },
            "required": [
              "target"
            ],
            "type": "object"
          }
        },
        "dnstwist_lookup": {
          "name": "dnstwist_lookup",
          "description": "",
          "input_schema": {
            "properties": {
              "domain": {
                "title": "Domain",
                "type": "string"
              }
            },
            "required": [
              "domain"
            ],
            "type": "object"
          }
        },
        "dig_lookup": {
          "name": "dig_lookup",
          "description": "",
          "input_schema": {
            "properties": {
              "target": {
                "title": "Target",
                "type": "string"
              }
            },
            "required": [
              "target"
            ],
            "type": "object"
          }
        },
        "host_lookup": {
          "name": "host_lookup",
          "description": "",
          "input_schema": {
            "properties": {
              "target": {
                "title": "Target",
                "type": "string"
              }
            },
            "required": [
              "target"
            ],
            "type": "object"
          }
        },
        "osint_overview": {
          "name": "osint_overview",
          "description": "",
          "input_schema": {
            "properties": {
              "target": {
                "title": "Target",
                "type": "string"
              }
            },
            "required": [
              "target"
            ],
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Reddit": {
      "name": "Reddit",
      "icon": "",
      "description": "",
      "command": [
        "uv",
        "run",
        "python",
        "-m",
        "mcp_reddit.reddit_fetcher"
      ],
      "connection_status": "success",
      "tools": {
        "fetch_reddit_hot_threads": {
          "name": "fetch_reddit_hot_threads",
          "description": "Fetch hot threads from a subreddit\n\nArgs:\n    subreddit: Name of the subreddit\n    limit: Number of posts to fetch (default: 10)\n    \nReturns:\n    Human readable string containing list of post information",
          "input_schema": {
            "properties": {
              "subreddit": {
                "title": "Subreddit",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "title": "Limit",
                "type": "integer"
              }
            },
            "required": [
              "subreddit"
            ],
            "type": "object"
          }
        },
        "fetch_reddit_post_content": {
          "name": "fetch_reddit_post_content",
          "description": "Fetch detailed content of a specific post\n\nArgs:\n    post_id: Reddit post ID\n    comment_limit: Number of top level comments to fetch\n    comment_depth: Maximum depth of comment tree to traverse\n\nReturns:\n    Human readable string containing post content and comments tree",
          "input_schema": {
            "properties": {
              "post_id": {
                "title": "Post Id",
                "type": "string"
              },
              "comment_limit": {
                "default": 20,
                "title": "Comment Limit",
                "type": "integer"
              },
              "comment_depth": {
                "default": 3,
                "title": "Comment Depth",
                "type": "integer"
              }
            },
            "required": [
              "post_id"
            ],
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "National Parks": {
      "name": "National Parks",
      "icon": "",
      "description": "",
      "command": [
        "node",
        "build/index.js"
      ],
      "connection_status": "success",
      "tools": {
        "findParks": {
          "name": "findParks",
          "description": "Search for national parks based on state, name, activities, or other criteria",
          "input_schema": {
            "type": "object",
            "properties": {
              "stateCode": {
                "type": "string",
                "description": "Filter parks by state code (e.g., \"CA\" for California, \"NY\" for New York). Multiple states can be comma-separated (e.g., \"CA,OR,WA\")"
              },
              "q": {
                "type": "string",
                "description": "Search term to filter parks by name or description"
              },
              "limit": {
                "type": "number",
                "description": "Maximum number of parks to return (default: 10, max: 50)"
              },
              "start": {
                "type": "number",
                "description": "Start position for results (useful for pagination)"
              },
              "activities": {
                "type": "string",
                "description": "Filter by available activities (e.g., \"hiking,camping\")"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getParkDetails": {
          "name": "getParkDetails",
          "description": "Get detailed information about a specific national park",
          "input_schema": {
            "type": "object",
            "properties": {
              "parkCode": {
                "type": "string",
                "description": "The park code of the national park (e.g., \"yose\" for Yosemite, \"grca\" for Grand Canyon)"
              }
            },
            "required": [
              "parkCode"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getAlerts": {
          "name": "getAlerts",
          "description": "Get current alerts for national parks including closures, hazards, and important information",
          "input_schema": {
            "type": "object",
            "properties": {
              "parkCode": {
                "type": "string",
                "description": "Filter alerts by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")."
              },
              "limit": {
                "type": "number",
                "description": "Maximum number of alerts to return (default: 10, max: 50)"
              },
              "start": {
                "type": "number",
                "description": "Start position for results (useful for pagination)"
              },
              "q": {
                "type": "string",
                "description": "Search term to filter alerts by title or description"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getVisitorCenters": {
          "name": "getVisitorCenters",
          "description": "Get information about visitor centers and their operating hours",
          "input_schema": {
            "type": "object",
            "properties": {
              "parkCode": {
                "type": "string",
                "description": "Filter visitor centers by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")."
              },
              "limit": {
                "type": "number",
                "description": "Maximum number of visitor centers to return (default: 10, max: 50)"
              },
              "start": {
                "type": "number",
                "description": "Start position for results (useful for pagination)"
              },
              "q": {
                "type": "string",
                "description": "Search term to filter visitor centers by name or description"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getCampgrounds": {
          "name": "getCampgrounds",
          "description": "Get information about available campgrounds and their amenities",
          "input_schema": {
            "type": "object",
            "properties": {
              "parkCode": {
                "type": "string",
                "description": "Filter campgrounds by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")."
              },
              "limit": {
                "type": "number",
                "description": "Maximum number of campgrounds to return (default: 10, max: 50)"
              },
              "start": {
                "type": "number",
                "description": "Start position for results (useful for pagination)"
              },
              "q": {
                "type": "string",
                "description": "Search term to filter campgrounds by name or description"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "getEvents": {
          "name": "getEvents",
          "description": "Find upcoming events at parks",
          "input_schema": {
            "type": "object",
            "properties": {
              "parkCode": {
                "type": "string",
                "description": "Filter events by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")."
              },
              "limit": {
                "type": "number",
                "description": "Maximum number of events to return (default: 10, max: 50)"
              },
              "start": {
                "type": "number",
                "description": "Start position for results (useful for pagination)"
              },
              "dateStart": {
                "type": "string",
                "description": "Start date for filtering events (format: YYYY-MM-DD)"
              },
              "dateEnd": {
                "type": "string",
                "description": "End date for filtering events (format: YYYY-MM-DD)"
              },
              "q": {
                "type": "string",
                "description": "Search term to filter events by title or description"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "attempts": 1
    },
    "Medical Calculator": {
      "name": "Medical Calculator",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "medcalc/__main__.py"
      ],
      "connection_status": "success",
      "tools": {
        "egfr_epi": {
          "name": "egfr_epi",
          "description": "\n    Estimated Glomerular Filtration Rate (eGFR) using the EPI formula (version 2021)\n    Reference: N Engl J Med. 2021 Nov 4;385(19):1737-1749\n    \n    Parameters:\n    -----------\n    scr : float\n        serum creatinine level in mg/dL\n    age : int\n        Age in years\n    male : bool\n        true if Male\n    \n    Returns:\n    --------\n    float\n        Estimated GFR in mL/min/1.73m^2\n    ",
          "input_schema": {
            "properties": {
              "scr": {
                "title": "Scr",
                "type": "number"
              },
              "age": {
                "title": "Age",
                "type": "integer"
              },
              "male": {
                "title": "Male",
                "type": "boolean"
              }
            },
            "required": [
              "scr",
              "age",
              "male"
            ],
            "title": "egfr_epiArguments",
            "type": "object"
          }
        },
        "egfr_epi_cr_cys": {
          "name": "egfr_epi_cr_cys",
          "description": "\n    Estimated Glomerular Filtration Rate (eGFR) using the 2021 CKD-EPI Creatinine-Cystatin C equation\n    Reference: N Engl J Med. 2021 Nov 4;385(19):1737-1749\n    \n    Parameters:\n    -----------\n    scr : float\n        Serum creatinine level in mg/dL\n    scys : float\n        Serum cystatin C level in mg/L\n    age : int\n        Age in years\n    male : bool\n        True if patient is male, False if female\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing eGFR result and calculation parameters\n    ",
          "input_schema": {
            "properties": {
              "scr": {
                "title": "Scr",
                "type": "number"
              },
              "scys": {
                "title": "Scys",
                "type": "number"
              },
              "age": {
                "title": "Age",
                "type": "integer"
              },
              "male": {
                "title": "Male",
                "type": "boolean"
              }
            },
            "required": [
              "scr",
              "scys",
              "age",
              "male"
            ],
            "title": "egfr_epi_cr_cysArguments",
            "type": "object"
          }
        },
        "bp_children": {
          "name": "bp_children",
          "description": "\n    혈압 센타일(percentile)을 계산하는 함수\n    \n    Parameters:\n    -----------\n    years : int\n        나이(년)\n    months : int\n        나이(월)\n    height : int\n        키(cm)\n    sex : str\n        성별 ('male' 또는 'female')\n    systolic : int\n        수축기 혈압(mmHg)\n    diastolic : int\n        이완기 혈압(mmHg)\n    \n    Returns:\n    --------\n    dict\n        수축기 및 이완기 혈압 센타일 결과를 포함하는 딕셔너리\n    ",
          "input_schema": {
            "properties": {
              "years": {
                "title": "Years",
                "type": "integer"
              },
              "months": {
                "title": "Months",
                "type": "integer"
              },
              "height": {
                "title": "Height",
                "type": "integer"
              },
              "sex": {
                "title": "Sex",
                "type": "string"
              },
              "systolic": {
                "title": "Systolic",
                "type": "integer"
              },
              "diastolic": {
                "title": "Diastolic",
                "type": "integer"
              }
            },
            "required": [
              "years",
              "months",
              "height",
              "sex",
              "systolic",
              "diastolic"
            ],
            "title": "bp_childrenArguments",
            "type": "object"
          }
        },
        "bmi_bsa_calculator": {
          "name": "bmi_bsa_calculator",
          "description": "\n    Calculates Body Mass Index (BMI) and Body Surface Area (BSA)\n    \n    Parameters:\n    -----------\n    weight : float\n        Weight in kilograms\n    height : float\n        Height in centimeters (default) or meters\n    height_unit : str\n        Unit of height measurement ('cm' or 'm', default is 'cm')\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing BMI, BSA, and classification\n    ",
          "input_schema": {
            "properties": {
              "weight": {
                "title": "Weight",
                "type": "number"
              },
              "height": {
                "title": "Height",
                "type": "number"
              },
              "height_unit": {
                "default": "cm",
                "title": "Height Unit",
                "type": "string"
              }
            },
            "required": [
              "weight",
              "height"
            ],
            "title": "bmi_bsa_calculatorArguments",
            "type": "object"
          }
        },
        "crcl_cockcroft_gault": {
          "name": "crcl_cockcroft_gault",
          "description": "\n    Calculate Creatinine Clearance using the Cockcroft-Gault formula\n    \n    Parameters:\n    -----------\n    age : int\n        Age in years\n    weight : float\n        Actual body weight in kg\n    height : float\n        Height in inches\n    scr : float\n        Serum creatinine in mg/dL\n    sex : str\n        Gender ('male' or 'female')\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing creatinine clearance result and weight calculations\n    ",
          "input_schema": {
            "properties": {
              "age": {
                "title": "Age",
                "type": "integer"
              },
              "weight": {
                "title": "Weight",
                "type": "number"
              },
              "height": {
                "title": "Height",
                "type": "number"
              },
              "scr": {
                "title": "Scr",
                "type": "number"
              },
              "sex": {
                "title": "Sex",
                "type": "string"
              }
            },
            "required": [
              "age",
              "weight",
              "height",
              "scr",
              "sex"
            ],
            "title": "crcl_cockcroft_gaultArguments",
            "type": "object"
          }
        },
        "map_calculator": {
          "name": "map_calculator",
          "description": "\n    Calculate Mean Arterial Pressure (MAP)\n    \n    Parameters:\n    -----------\n    sbp : int\n        Systolic Blood Pressure in mmHg\n    dbp : int\n        Diastolic Blood Pressure in mmHg\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing MAP result and input values\n    ",
          "input_schema": {
            "properties": {
              "sbp": {
                "title": "Sbp",
                "type": "integer"
              },
              "dbp": {
                "title": "Dbp",
                "type": "integer"
              }
            },
            "required": [
              "sbp",
              "dbp"
            ],
            "title": "map_calculatorArguments",
            "type": "object"
          }
        },
        "chads2_vasc_score": {
          "name": "chads2_vasc_score",
          "description": "\n    Calculate CHA₂DS₂-VASc Score for Atrial Fibrillation Stroke Risk\n    \n    Parameters:\n    -----------\n    age : int\n        Age in years\n    female : bool\n        True if patient is female, False if male\n    chf : bool\n        True if patient has history of congestive heart failure\n    hypertension : bool\n        True if patient has history of hypertension\n    stroke_history : bool\n        True if patient has history of stroke, TIA, or thromboembolism\n    vascular_disease : bool\n        True if patient has history of vascular disease (prior MI, peripheral artery disease, or aortic plaque)\n    diabetes : bool\n        True if patient has history of diabetes mellitus\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing CHA₂DS₂-VASc score and risk factors\n    ",
          "input_schema": {
            "properties": {
              "age": {
                "title": "Age",
                "type": "integer"
              },
              "female": {
                "title": "Female",
                "type": "boolean"
              },
              "chf": {
                "title": "Chf",
                "type": "boolean"
              },
              "hypertension": {
                "title": "Hypertension",
                "type": "boolean"
              },
              "stroke_history": {
                "title": "Stroke History",
                "type": "boolean"
              },
              "vascular_disease": {
                "title": "Vascular Disease",
                "type": "boolean"
              },
              "diabetes": {
                "title": "Diabetes",
                "type": "boolean"
              }
            },
            "required": [
              "age",
              "female",
              "chf",
              "hypertension",
              "stroke_history",
              "vascular_disease",
              "diabetes"
            ],
            "title": "chads2_vasc_scoreArguments",
            "type": "object"
          }
        },
        "prevent_cvd_risk": {
          "name": "prevent_cvd_risk",
          "description": "\n    Predicting Risk of Cardiovascular Disease EVENTs (PREVENT)\n    Predicts 10-year risk of CVD in patients aged 30-79 without known CVD.\n    \n    Parameters:\n    -----------\n    age : int\n        Age in years (30-79)\n    female : bool\n        True if patient is female, False if male\n    tc : float\n        Total cholesterol in mmol/L\n    hdl : float\n        HDL cholesterol in mmol/L\n    sbp : int\n        Systolic blood pressure in mmHg\n    diabetes : bool\n        True if patient has diabetes\n    current_smoker : bool\n        True if patient is a current smoker\n    egfr : float\n        Estimated glomerular filtration rate in mL/min/1.73m²\n    using_antihtn : bool\n        True if patient is using antihypertensive drugs\n    using_statins : bool\n        True if patient is using statins\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing 10-year CVD risk and calculation details\n    ",
          "input_schema": {
            "properties": {
              "age": {
                "title": "Age",
                "type": "integer"
              },
              "female": {
                "title": "Female",
                "type": "boolean"
              },
              "tc": {
                "title": "Tc",
                "type": "number"
              },
              "hdl": {
                "title": "Hdl",
                "type": "number"
              },
              "sbp": {
                "title": "Sbp",
                "type": "integer"
              },
              "diabetes": {
                "title": "Diabetes",
                "type": "boolean"
              },
              "current_smoker": {
                "title": "Current Smoker",
                "type": "boolean"
              },
              "egfr": {
                "title": "Egfr",
                "type": "number"
              },
              "using_antihtn": {
                "title": "Using Antihtn",
                "type": "boolean"
              },
              "using_statins": {
                "title": "Using Statins",
                "type": "boolean"
              }
            },
            "required": [
              "age",
              "female",
              "tc",
              "hdl",
              "sbp",
              "diabetes",
              "current_smoker",
              "egfr",
              "using_antihtn",
              "using_statins"
            ],
            "title": "prevent_cvd_riskArguments",
            "type": "object"
          }
        },
        "corrected_calcium": {
          "name": "corrected_calcium",
          "description": "\n    Calcium Correction for Hypoalbuminemia and Hyperalbuminemia\n    Calculates a corrected calcium level for patients with abnormal albumin levels.\n    \n    Parameters:\n    -----------\n    serum_calcium : float\n        Patient's measured serum calcium level in mg/dL\n    patient_albumin : float\n        Patient's serum albumin level in g/dL\n    normal_albumin : float, optional\n        Normal/reference albumin level in g/dL, default is 4.0 g/dL\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing corrected calcium value, interpretation, and calculation details\n        \n    Formula:\n    --------\n    Corrected Calcium = (0.8 * (Normal Albumin - Patient's Albumin)) + Serum Calcium\n    \n    References:\n    -----------\n    Payne RB, et al. Br Med J. 1973;4(5893):643-646.\n    ",
          "input_schema": {
            "properties": {
              "serum_calcium": {
                "title": "Serum Calcium",
                "type": "number"
              },
              "patient_albumin": {
                "title": "Patient Albumin",
                "type": "number"
              },
              "normal_albumin": {
                "default": 4.0,
                "title": "Normal Albumin",
                "type": "number"
              }
            },
            "required": [
              "serum_calcium",
              "patient_albumin"
            ],
            "title": "corrected_calciumArguments",
            "type": "object"
          }
        },
        "qtc_calculator": {
          "name": "qtc_calculator",
          "description": "\n    Corrected QT Interval (QTc) Calculator\n    Corrects the QT interval for heart rate extremes using various formulas.\n    \n    Parameters:\n    -----------\n    qt_interval : float\n        Measured QT interval in milliseconds (ms)\n    heart_rate : float\n        Heart rate in beats per minute (bpm)\n    formula : str, optional\n        Formula to use for correction (default: \"bazett\")\n        Options: \"bazett\", \"fridericia\", \"framingham\", \"hodges\", \"rautaharju\"\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing QTc value, interpretation, and calculation details\n        \n    Formulas:\n    ---------\n    RR interval = 60 / heart_rate (in seconds)\n    Bazett: QTc = QT / √(RR)\n    Fridericia: QTc = QT / (RR)^(1/3)\n    Framingham: QTc = QT + 154 × (1 - RR)\n    Hodges: QTc = QT + 1.75 × (heart_rate - 60)\n    Rautaharju: QTc = QT × (120 + heart_rate) / 180\n    \n    References:\n    -----------\n    Bazett HC. Heart. 1920;7:353-370\n    Fridericia LS. Acta Med Scand. 1920;53:469-486\n    Sagie A, et al. Am J Cardiol. 1992;70(7):797-801 (Framingham)\n    Hodges M, et al. J Electrocardiol. 1983;16(1):17-24\n    Rautaharju PM, et al. J Am Coll Cardiol. 2004;44(3):594-600\n    ",
          "input_schema": {
            "properties": {
              "qt_interval": {
                "title": "Qt Interval",
                "type": "number"
              },
              "heart_rate": {
                "title": "Heart Rate",
                "type": "number"
              },
              "formula": {
                "default": "bazett",
                "title": "Formula",
                "type": "string"
              }
            },
            "required": [
              "qt_interval",
              "heart_rate"
            ],
            "title": "qtc_calculatorArguments",
            "type": "object"
          }
        },
        "wells_pe_criteria": {
          "name": "wells_pe_criteria",
          "description": "\n    Wells' Criteria for Pulmonary Embolism\n    Objectifies risk of pulmonary embolism based on clinical criteria.\n    Reference: Wells PS, et al. Thromb Haemost. 2000;83(3):416-20.\n    \n    Parameters:\n    -----------\n    clinical_signs_dvt: bool\n        Clinical signs and symptoms of DVT (leg swelling, pain with palpation)\n    alternative_diagnosis_less_likely: bool\n        Alternative diagnosis less likely than PE\n    heart_rate_over_100: bool\n        Heart rate > 100 beats per minute\n    immobilization_or_surgery: bool\n        Immobilization or surgery in the previous four weeks\n    previous_dvt_or_pe: bool\n        Previous DVT/PE\n    hemoptysis: bool\n        Hemoptysis\n    malignancy: bool\n        Malignancy (treatment ongoing, treated in last 6 months, or palliative)\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing the score, risk category for both three-tier and \n        two-tier models, and recommendations\n    ",
          "input_schema": {
            "properties": {
              "clinical_signs_dvt": {
                "default": false,
                "title": "Clinical Signs Dvt",
                "type": "boolean"
              },
              "alternative_diagnosis_less_likely": {
                "default": false,
                "title": "Alternative Diagnosis Less Likely",
                "type": "boolean"
              },
              "heart_rate_over_100": {
                "default": false,
                "title": "Heart Rate Over 100",
                "type": "boolean"
              },
              "immobilization_or_surgery": {
                "default": false,
                "title": "Immobilization Or Surgery",
                "type": "boolean"
              },
              "previous_dvt_or_pe": {
                "default": false,
                "title": "Previous Dvt Or Pe",
                "type": "boolean"
              },
              "hemoptysis": {
                "default": false,
                "title": "Hemoptysis",
                "type": "boolean"
              },
              "malignancy": {
                "default": false,
                "title": "Malignancy",
                "type": "boolean"
              }
            },
            "title": "wells_pe_criteriaArguments",
            "type": "object"
          }
        },
        "ibw_abw_calculator": {
          "name": "ibw_abw_calculator",
          "description": "\n    Ideal Body Weight and Adjusted Body Weight Calculator\n    Calculates ideal body weight (Devine formula) and adjusted body weight.\n    \n    Parameters:\n    -----------\n    weight_kg : float\n        Actual body weight in kilograms\n    height_inches : float\n        Height in inches\n    male : bool\n        True if patient is male, False if female\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing ideal body weight, adjusted body weight, and calculation details\n        \n    Formulas:\n    ---------\n    Ideal Body Weight (IBW) (Devine formula):\n    - Men: IBW = 50 kg + 2.3 kg × (height in inches - 60)\n    - Women: IBW = 45.5 kg + 2.3 kg × (height in inches - 60)\n    \n    Adjusted Body Weight (ABW):\n    - ABW = IBW + 0.4 × (actual weight - IBW)\n    \n    References:\n    -----------\n    Devine BJ. Gentamicin therapy. Drug Intell Clin Pharm. 1974;8:650-655.\n    Pai MP. Drug Dosing Based on Weight and Body Surface Area: Mathematical Assumptions and Limitations in Obese Adults. Pharmacotherapy. 2012;32(9):856-868.\n    ",
          "input_schema": {
            "properties": {
              "weight_kg": {
                "title": "Weight Kg",
                "type": "number"
              },
              "height_inches": {
                "title": "Height Inches",
                "type": "number"
              },
              "male": {
                "title": "Male",
                "type": "boolean"
              }
            },
            "required": [
              "weight_kg",
              "height_inches",
              "male"
            ],
            "title": "ibw_abw_calculatorArguments",
            "type": "object"
          }
        },
        "pregnancy_calculator": {
          "name": "pregnancy_calculator",
          "description": "\n    Pregnancy Due Dates Calculator\n    Calculates pregnancy dates from last period, gestational age, or date of conception.\n    \n    Parameters:\n    -----------\n    calculation_method : str\n        Method used for calculation: \"lmp\" (last menstrual period), \"conception\", or \"ultrasound\"\n    date_value : str\n        Date in format 'YYYY-MM-DD' (date of LMP, conception, or ultrasound)\n    cycle_length : int, optional\n        Length of menstrual cycle in days (default: 28)\n    gestational_age_weeks : int, optional\n        Weeks of gestational age at ultrasound (required if calculation_method is \"ultrasound\")\n    gestational_age_days : int, optional\n        Days of gestational age at ultrasound (required if calculation_method is \"ultrasound\")\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing calculated pregnancy dates and information\n        \n    Formulas:\n    ---------\n    - EGA (Estimated Gestational Age) = time since 1st day of LMP\n    - EDC (Estimated Date of Conception) = LMP + 2 weeks (adjusted for cycle length)\n    - EDD (Estimated Due Date) = LMP + 40 weeks (adjusted for cycle length)\n    \n    For non-28 day cycles:\n    - Adjustment = (cycle_length - 28) days\n    - EDD = LMP + 40 weeks + Adjustment\n    ",
          "input_schema": {
            "properties": {
              "calculation_method": {
                "title": "Calculation Method",
                "type": "string"
              },
              "date_value": {
                "title": "Date Value",
                "type": "string"
              },
              "cycle_length": {
                "default": 28,
                "title": "Cycle Length",
                "type": "integer"
              },
              "gestational_age_weeks": {
                "default": null,
                "title": "Gestational Age Weeks",
                "type": "integer"
              },
              "gestational_age_days": {
                "default": null,
                "title": "Gestational Age Days",
                "type": "integer"
              }
            },
            "required": [
              "calculation_method",
              "date_value"
            ],
            "title": "pregnancy_calculatorArguments",
            "type": "object"
          }
        },
        "revised_cardiac_risk_index": {
          "name": "revised_cardiac_risk_index",
          "description": "\n    Revised Cardiac Risk Index for Pre-Operative Risk\n    Estimates risk of cardiac complications after noncardiac surgery.\n    \n    Parameters:\n    -----------\n    high_risk_surgery : bool\n        Intraperitoneal, intrathoracic, or suprainguinal vascular surgery\n    ischemic_heart_disease : bool\n        History of MI, positive exercise test, current chest pain considered due to myocardial \n        ischemia, use of nitrate therapy, or ECG with pathological Q waves\n    congestive_heart_failure : bool\n        Pulmonary edema, bilateral rales, S3 gallop, paroxysmal nocturnal dyspnea, or \n        CXR showing pulmonary vascular redistribution\n    cerebrovascular_disease : bool\n        Prior transient ischemic attack (TIA) or stroke\n    insulin_treatment : bool\n        Pre-operative treatment with insulin\n    creatinine_over_2mg : bool\n        Pre-operative creatinine >2 mg/dL (176.8 µmol/L)\n    \n    Returns:\n    --------\n    dict\n        Dictionary containing RCRI score and risk interpretation\n        \n    References:\n    -----------\n    Lee TH, et al. Circulation. 1999;100(10):1043-1049.\n    Canadian Cardiovascular Society (CCS) Guidelines, 2017.\n    European Society of Cardiology (ESC) Guidelines, 2022.\n    ",
          "input_schema": {
            "properties": {
              "high_risk_surgery": {
                "default": false,
                "title": "High Risk Surgery",
                "type": "boolean"
              },
              "ischemic_heart_disease": {
                "default": false,
                "title": "Ischemic Heart Disease",
                "type": "boolean"
              },
              "congestive_heart_failure": {
                "default": false,
                "title": "Congestive Heart Failure",
                "type": "boolean"
              },
              "cerebrovascular_disease": {
                "default": false,
                "title": "Cerebrovascular Disease",
                "type": "boolean"
              },
              "insulin_treatment": {
                "default": false,
                "title": "Insulin Treatment",
                "type": "boolean"
              },
              "creatinine_over_2mg": {
                "default": false,
                "title": "Creatinine Over 2Mg",
                "type": "boolean"
              }
            },
            "title": "revised_cardiac_risk_indexArguments",
            "type": "object"
          }
        },
        "child_pugh_score": {
          "name": "child_pugh_score",
          "description": "\n    Calculates the Child-Pugh Score for cirrhosis mortality assessment.\n\n    Parameters:\n    -----------\n    bilirubin : float\n        Total bilirubin in mg/dL.\n    albumin : float\n        Albumin in g/dL.\n    inr : float\n        International Normalized Ratio (INR) for prothrombin time.\n    ascites : str\n        One of: \"absent\", \"slight\", \"moderate\".\n    encephalopathy_grade : int\n        Hepatic encephalopathy grade: 0 (none), 1-2 (mild), 3-4 (severe).\n\n    Returns:\n    --------\n    int\n        Total Child-Pugh score (5–15).\n    ",
          "input_schema": {
            "properties": {
              "bilirubin": {
                "title": "Bilirubin",
                "type": "number"
              },
              "albumin": {
                "title": "Albumin",
                "type": "number"
              },
              "inr": {
                "title": "Inr",
                "type": "number"
              },
              "ascites": {
                "title": "Ascites",
                "type": "string"
              },
              "encephalopathy_grade": {
                "title": "Encephalopathy Grade",
                "type": "integer"
              }
            },
            "required": [
              "bilirubin",
              "albumin",
              "inr",
              "ascites",
              "encephalopathy_grade"
            ],
            "title": "child_pugh_scoreArguments",
            "type": "object"
          }
        },
        "steroid_conversion": {
          "name": "steroid_conversion",
          "description": "\n    Converts corticosteroid dosages using standard equivalencies.\n\n    Parameters:\n    -----------\n    from_steroid : str\n        Name of the original steroid (e.g., 'prednisone', 'dexamethasone').\n    from_dose_mg : float\n        Dose of the original steroid in mg.\n    to_steroid : str\n        Name of the steroid to convert to.\n\n    Returns:\n    --------\n    float\n        Equivalent dose in mg of the target steroid.\n    ",
          "input_schema": {
            "properties": {
              "from_steroid": {
                "title": "From Steroid",
                "type": "string"
              },
              "from_dose_mg": {
                "title": "From Dose Mg",
                "type": "number"
              },
              "to_steroid": {
                "title": "To Steroid",
                "type": "string"
              }
            },
            "required": [
              "from_steroid",
              "from_dose_mg",
              "to_steroid"
            ],
            "title": "steroid_conversionArguments",
            "type": "object"
          }
        },
        "calculate_mme": {
          "name": "calculate_mme",
          "description": "\n    Calculates total daily Morphine Milligram Equivalents (MME).\n\n    Parameters:\n    -----------\n    opioid : str\n        Name of the opioid (e.g., 'oxycodone', 'fentanyl_patch').\n    dose_per_administration : float\n        Amount of opioid per dose (mg for most, mcg/hr for fentanyl patch).\n    doses_per_day : int\n        Number of times the dose is taken per day.\n\n    Returns:\n    --------\n    float\n        Total MME/day.\n    ",
          "input_schema": {
            "properties": {
              "opioid": {
                "title": "Opioid",
                "type": "string"
              },
              "dose_per_administration": {
                "title": "Dose Per Administration",
                "type": "number"
              },
              "doses_per_day": {
                "title": "Doses Per Day",
                "type": "integer"
              }
            },
            "required": [
              "opioid",
              "dose_per_administration",
              "doses_per_day"
            ],
            "title": "calculate_mmeArguments",
            "type": "object"
          }
        },
        "maintenance_fluids": {
          "name": "maintenance_fluids",
          "description": "\n    Calculates maintenance IV fluid rate (mL/hr) using the 4-2-1 Rule.\n\n    Parameters:\n    -----------\n    weight_kg : float\n        Patient's weight in kilograms.\n\n    Returns:\n    --------\n    float\n        Maintenance fluid rate in mL/hr.\n    ",
          "input_schema": {
            "properties": {
              "weight_kg": {
                "title": "Weight Kg",
                "type": "number"
              }
            },
            "required": [
              "weight_kg"
            ],
            "title": "maintenance_fluidsArguments",
            "type": "object"
          }
        },
        "corrected_sodium": {
          "name": "corrected_sodium",
          "description": "\n    Calculates corrected sodium level in the setting of hyperglycemia\n    using Katz and Hillier correction formulas.\n\n    Parameters:\n    -----------\n    measured_sodium : float\n        Measured serum sodium in mEq/L.\n    serum_glucose : float\n        Serum glucose in mg/dL.\n\n    Returns:\n    --------\n    dict\n        Dictionary with corrected sodium values using Katz and Hillier formulas.\n    ",
          "input_schema": {
            "properties": {
              "measured_sodium": {
                "title": "Measured Sodium",
                "type": "number"
              },
              "serum_glucose": {
                "title": "Serum Glucose",
                "type": "number"
              }
            },
            "required": [
              "measured_sodium",
              "serum_glucose"
            ],
            "title": "corrected_sodiumArguments",
            "type": "object"
          }
        },
        "meld_3": {
          "name": "meld_3",
          "description": "\n    Calculates MELD 3.0 Score for liver disease transplant planning.\n\n    Parameters:\n    -----------\n    age : int\n        Patient age in years.\n    female : bool\n        True if patient is female.\n    bilirubin : float\n        Serum bilirubin in mg/dL.\n    inr : float\n        INR (International Normalized Ratio).\n    creatinine : float\n        Serum creatinine in mg/dL.\n    albumin : float\n        Serum albumin in g/dL.\n    sodium : float\n        Serum sodium in mEq/L.\n    dialysis : bool\n        True if patient had ≥2 dialysis sessions or 24h CVVHD in last 7 days.\n\n    Returns:\n    --------\n    int\n        MELD 3.0 score, rounded to the nearest whole number.\n    ",
          "input_schema": {
            "properties": {
              "age": {
                "title": "Age",
                "type": "integer"
              },
              "female": {
                "title": "Female",
                "type": "boolean"
              },
              "bilirubin": {
                "title": "Bilirubin",
                "type": "number"
              },
              "inr": {
                "title": "Inr",
                "type": "number"
              },
              "creatinine": {
                "title": "Creatinine",
                "type": "number"
              },
              "albumin": {
                "title": "Albumin",
                "type": "number"
              },
              "sodium": {
                "title": "Sodium",
                "type": "number"
              },
              "dialysis": {
                "title": "Dialysis",
                "type": "boolean"
              }
            },
            "required": [
              "age",
              "female",
              "bilirubin",
              "inr",
              "creatinine",
              "albumin",
              "sodium",
              "dialysis"
            ],
            "title": "meld_3Arguments",
            "type": "object"
          }
        },
        "framingham_risk_score": {
          "name": "framingham_risk_score",
          "description": "\n    Calculates the Framingham Risk Score for 10-year risk of heart attack (CHD)\n    based on the Framingham Heart Study equation (men and women).\n\n    Parameters:\n    -----------\n    age : int\n        Age of the patient (30-79 years).\n    total_cholesterol : float\n        Total cholesterol in mg/dL.\n    hdl_cholesterol : float\n        HDL cholesterol in mg/dL.\n    systolic_bp : float\n        Systolic blood pressure in mmHg.\n    treated_for_bp : bool\n        Whether the patient is treated for high blood pressure (1 if yes, 0 if no).\n    smoker : bool\n        Whether the patient is a smoker (1 if yes, 0 if no).\n    gender : str\n        Gender of the patient (\"male\" or \"female\").\n\n    Returns:\n    --------\n    float\n        10-year risk of heart attack as a percentage.\n    ",
          "input_schema": {
            "properties": {
              "age": {
                "title": "Age",
                "type": "integer"
              },
              "total_cholesterol": {
                "title": "Total Cholesterol",
                "type": "number"
              },
              "hdl_cholesterol": {
                "title": "Hdl Cholesterol",
                "type": "number"
              },
              "systolic_bp": {
                "title": "Systolic Bp",
                "type": "number"
              },
              "treated_for_bp": {
                "title": "Treated For Bp",
                "type": "boolean"
              },
              "smoker": {
                "title": "Smoker",
                "type": "boolean"
              },
              "gender": {
                "title": "Gender",
                "type": "string"
              }
            },
            "required": [
              "age",
              "total_cholesterol",
              "hdl_cholesterol",
              "systolic_bp",
              "treated_for_bp",
              "smoker",
              "gender"
            ],
            "title": "framingham_risk_scoreArguments",
            "type": "object"
          }
        },
        "homa_ir": {
          "name": "homa_ir",
          "description": "\n    Calculates the HOMA-IR score for insulin resistance.\n\n    Formula:\n    Score = (Fasting insulin (uIU/mL) * Fasting glucose (mg/dL)) / 405\n\n    Parameters:\n    -----------\n    fasting_insulin : float\n        Fasting insulin level in micro-units per milliliter (uIU/mL).\n    fasting_glucose : float\n        Fasting glucose level in milligrams per deciliter (mg/dL).\n\n    Returns:\n    --------\n    float\n        HOMA-IR score.\n    ",
          "input_schema": {
            "properties": {
              "fasting_insulin": {
                "title": "Fasting Insulin",
                "type": "number"
              },
              "fasting_glucose": {
                "title": "Fasting Glucose",
                "type": "number"
              }
            },
            "required": [
              "fasting_insulin",
              "fasting_glucose"
            ],
            "title": "homa_irArguments",
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Metropolitan Museum": {
      "name": "Metropolitan Museum",
      "icon": "",
      "description": "",
      "command": [
        "node",
        "dist/index.js"
      ],
      "connection_status": "success",
      "tools": {
        "list-departments": {
          "name": "list-departments",
          "description": "List all departments in the Metropolitan Museum of Art (Met Museum)",
          "input_schema": {
            "type": "object",
            "properties": {
              "__intent": {
                "type": "string",
                "description": "In ≤ 30 words, describe why you are calling this tool and how its result advances your overall task. Don't use first-person pronouns like \"I\" or \"my\". Make sure to give a gist of the whole task and how this tool fits into it."
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "__intent"
            ]
          }
        },
        "search-museum-objects": {
          "name": "search-museum-objects",
          "description": "Search for objects in the Metropolitan Museum of Art (Met Museum). Will return Total objects found, followed by a list of Object Ids.The parameter title should be set to true if you want to search for objects by title.The parameter hasImages is false by default, but can be set to true to return objects without images.If the parameter hasImages is true, the parameter title should be false.",
          "input_schema": {
            "type": "object",
            "properties": {
              "q": {
                "type": "string",
                "description": "The search query, Returns a listing of all Object IDs for objects that contain the search query within the object's data"
              },
              "hasImages": {
                "type": "boolean",
                "default": false,
                "description": "Only returns objects that have images"
              },
              "title": {
                "type": "boolean",
                "default": false,
                "description": "This should be set to true if you want to search for objects by title"
              },
              "departmentId": {
                "type": "number",
                "description": "Returns objects that are in the specified department. The departmentId should come from the 'list-departments' tool."
              },
              "__intent": {
                "type": "string",
                "description": "In ≤ 30 words, describe why you are calling this tool and how its result advances your overall task. Don't use first-person pronouns like \"I\" or \"my\". Make sure to give a gist of the whole task and how this tool fits into it."
              }
            },
            "required": [
              "q",
              "__intent"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "get-museum-object": {
          "name": "get-museum-object",
          "description": "Get a museum object by its ID, from the Metropolitan Museum of Art Collection",
          "input_schema": {
            "type": "object",
            "properties": {
              "objectId": {
                "type": "number",
                "description": "The ID of the museum object to retrieve"
              },
              "returnImage": {
                "type": "boolean",
                "default": true,
                "description": "Whether to return the image (if available) of the object and add it to the server resources"
              },
              "__intent": {
                "type": "string",
                "description": "In ≤ 30 words, describe why you are calling this tool and how its result advances your overall task. Don't use first-person pronouns like \"I\" or \"my\". Make sure to give a gist of the whole task and how this tool fits into it."
              }
            },
            "required": [
              "objectId",
              "__intent"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "attempts": 1
    },
    "Movie Recommender": {
      "name": "Movie Recommender",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "server.py"
      ],
      "connection_status": "success",
      "tools": {
        "get_movies": {
          "name": "get_movies",
          "description": "\n    Get movie suggestions based on keyword.\n    ",
          "input_schema": {
            "properties": {
              "keyword": {
                "title": "Keyword",
                "type": "string"
              }
            },
            "required": [
              "keyword"
            ],
            "title": "get_moviesArguments",
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "NASA Data": {
      "name": "NASA Data",
      "icon": "",
      "description": "",
      "command": [
        "uv",
        "run",
        "python",
        "main.py"
      ],
      "connection_status": "success",
      "tools": {
        "get_astronomy_picture_of_day": {
          "name": "get_astronomy_picture_of_day",
          "description": "Get NASA's astronomy picture of the day.\n\nArgs:\n    date: Date of the image in YYYY-MM-DD format. If not specified, the current date is used.\n    count: If specified, returns 'count' random images. Cannot be used with 'date'.\n    thumbs: If True, returns the thumbnail URL for videos. If APOD is not a video, this parameter is ignored.\n",
          "input_schema": {
            "properties": {
              "date": {
                "default": null,
                "title": "Date",
                "type": "string"
              },
              "count": {
                "default": null,
                "title": "Count",
                "type": "integer"
              },
              "thumbs": {
                "default": false,
                "title": "Thumbs",
                "type": "boolean"
              }
            },
            "title": "get_astronomy_picture_of_dayArguments",
            "type": "object"
          }
        },
        "get_asteroids_feed": {
          "name": "get_asteroids_feed",
          "description": "Get a list of asteroids based on their closest approach date to Earth.\n\nArgs:\n    start_date: Start date for asteroid search in YYYY-MM-DD format.\n    end_date: End date for asteroid search in YYYY-MM-DD format. \n    The Feed date limit is only 7 Days. If not specified, 7 days after start_date is used.\n",
          "input_schema": {
            "properties": {
              "start_date": {
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "default": null,
                "title": "End Date",
                "type": "string"
              }
            },
            "required": [
              "start_date"
            ],
            "title": "get_asteroids_feedArguments",
            "type": "object"
          }
        },
        "get_asteroid_lookup": {
          "name": "get_asteroid_lookup",
          "description": "Look up a specific asteroid based on its NASA JPL ID.\n\nArgs:\n    asteroid_id: Asteroid ID in the NASA JPL small body (SPK-ID) system.\n",
          "input_schema": {
            "properties": {
              "asteroid_id": {
                "title": "Asteroid Id",
                "type": "string"
              }
            },
            "required": [
              "asteroid_id"
            ],
            "title": "get_asteroid_lookupArguments",
            "type": "object"
          }
        },
        "browse_asteroids": {
          "name": "browse_asteroids",
          "description": "Browse the asteroid dataset.",
          "input_schema": {
            "properties": {},
            "title": "browse_asteroidsArguments",
            "type": "object"
          }
        },
        "get_coronal_mass_ejection": {
          "name": "get_coronal_mass_ejection",
          "description": "Get coronal mass ejection (CME) data.\n\nArgs:\n    start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date.\n    end_date: End date in YYYY-MM-DD format. Defaults to current date.\n",
          "input_schema": {
            "properties": {
              "start_date": {
                "default": null,
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "default": null,
                "title": "End Date",
                "type": "string"
              }
            },
            "title": "get_coronal_mass_ejectionArguments",
            "type": "object"
          }
        },
        "get_geomagnetic_storm": {
          "name": "get_geomagnetic_storm",
          "description": "Get geomagnetic storm (GST) data.\n\nArgs:\n    start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date.\n    end_date: End date in YYYY-MM-DD format. Defaults to current date.\n",
          "input_schema": {
            "properties": {
              "start_date": {
                "default": null,
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "default": null,
                "title": "End Date",
                "type": "string"
              }
            },
            "title": "get_geomagnetic_stormArguments",
            "type": "object"
          }
        },
        "get_solar_flare": {
          "name": "get_solar_flare",
          "description": "Get solar flare (FLR) data.\n\nArgs:\n    start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date.\n    end_date: End date in YYYY-MM-DD format. Defaults to current date.\n",
          "input_schema": {
            "properties": {
              "start_date": {
                "default": null,
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "default": null,
                "title": "End Date",
                "type": "string"
              }
            },
            "title": "get_solar_flareArguments",
            "type": "object"
          }
        },
        "get_solar_energetic_particle": {
          "name": "get_solar_energetic_particle",
          "description": "Get solar energetic particle (SEP) data.\n\nArgs:\n    start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date.\n    end_date: End date in YYYY-MM-DD format. Defaults to current date.\n",
          "input_schema": {
            "properties": {
              "start_date": {
                "default": null,
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "default": null,
                "title": "End Date",
                "type": "string"
              }
            },
            "title": "get_solar_energetic_particleArguments",
            "type": "object"
          }
        },
        "get_magnetopause_crossing": {
          "name": "get_magnetopause_crossing",
          "description": "Get magnetopause crossing (MPC) data.\n\nArgs:\n    start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date.\n    end_date: End date in YYYY-MM-DD format. Defaults to current date.\n",
          "input_schema": {
            "properties": {
              "start_date": {
                "default": null,
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "default": null,
                "title": "End Date",
                "type": "string"
              }
            },
            "title": "get_magnetopause_crossingArguments",
            "type": "object"
          }
        },
        "get_radiation_belt_enhancement": {
          "name": "get_radiation_belt_enhancement",
          "description": "Get radiation belt enhancement (RBE) data.\n\nArgs:\n    start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date.\n    end_date: End date in YYYY-MM-DD format. Defaults to current date.\n",
          "input_schema": {
            "properties": {
              "start_date": {
                "default": null,
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "default": null,
                "title": "End Date",
                "type": "string"
              }
            },
            "title": "get_radiation_belt_enhancementArguments",
            "type": "object"
          }
        },
        "get_hight_speed_stream": {
          "name": "get_hight_speed_stream",
          "description": "Get high speed stream (HSS) data.\n\nArgs:\n    start_date: Start date in YYYY-MM-DD format. Defaults to 30 days before current date.\n    end_date: End date in YYYY-MM-DD format. Defaults to current date.\n",
          "input_schema": {
            "properties": {
              "start_date": {
                "default": null,
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "default": null,
                "title": "End Date",
                "type": "string"
              }
            },
            "title": "get_hight_speed_streamArguments",
            "type": "object"
          }
        },
        "get_wsa_enlil_simulation": {
          "name": "get_wsa_enlil_simulation",
          "description": "Get WSA+Enlil simulation data.\n\nArgs:\n    start_date: Start date in YYYY-MM-DD format. Defaults to 7 days before current date.\n    end_date: End date in YYYY-MM-DD format. Defaults to current date.\n",
          "input_schema": {
            "properties": {
              "start_date": {
                "default": null,
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "default": null,
                "title": "End Date",
                "type": "string"
              }
            },
            "title": "get_wsa_enlil_simulationArguments",
            "type": "object"
          }
        },
        "get_notifications": {
          "name": "get_notifications",
          "description": "Get DONKI notifications.\n\nArgs:\n    start_date: Start date in YYYY-MM-DD format. Defaults to 7 days before current date.\n    end_date: End date in YYYY-MM-DD format. Defaults to current date.\n    notification_type: Notification type. Options: all, FLR, SEP, CME, IPS, MPC, GST, RBE, report.\n",
          "input_schema": {
            "properties": {
              "start_date": {
                "default": null,
                "title": "Start Date",
                "type": "string"
              },
              "end_date": {
                "default": null,
                "title": "End Date",
                "type": "string"
              },
              "notification_type": {
                "default": "all",
                "title": "Notification Type",
                "type": "string"
              }
            },
            "title": "get_notificationsArguments",
            "type": "object"
          }
        },
        "get_earth_imagery": {
          "name": "get_earth_imagery",
          "description": "Get Earth imagery from Landsat 8 satellite.\n\nArgs:\n    lat: Latitude.\n    lon: Longitude.\n    date: Image date in YYYY-MM-DD format. If not specified, the most recent image is used.\n    dim: Width and height of the image in degrees (0.025 degrees is approximately 2.7 km).\n    cloud_score: Calculate the percentage of the image covered by clouds (currently not available).\n",
          "input_schema": {
            "properties": {
              "lat": {
                "title": "Lat",
                "type": "number"
              },
              "lon": {
                "title": "Lon",
                "type": "number"
              },
              "date": {
                "default": null,
                "title": "Date",
                "type": "string"
              },
              "dim": {
                "default": 0.025,
                "title": "Dim",
                "type": "number"
              },
              "cloud_score": {
                "default": false,
                "title": "Cloud Score",
                "type": "boolean"
              }
            },
            "required": [
              "lat",
              "lon"
            ],
            "title": "get_earth_imageryArguments",
            "type": "object"
          }
        },
        "get_earth_assets": {
          "name": "get_earth_assets",
          "description": "Get information about available imagery assets for a specific location and date.\n\nArgs:\n    lat: Latitude.\n    lon: Longitude.\n    date: Date in YYYY-MM-DD format.\n    dim: Width and height of the image in degrees (0.025 degrees is approximately 2.7 km).\n",
          "input_schema": {
            "properties": {
              "lat": {
                "title": "Lat",
                "type": "number"
              },
              "lon": {
                "title": "Lon",
                "type": "number"
              },
              "date": {
                "title": "Date",
                "type": "string"
              },
              "dim": {
                "default": 0.025,
                "title": "Dim",
                "type": "number"
              }
            },
            "required": [
              "lat",
              "lon",
              "date"
            ],
            "title": "get_earth_assetsArguments",
            "type": "object"
          }
        },
        "get_epic_imagery": {
          "name": "get_epic_imagery",
          "description": "Get images from the EPIC (Earth Polychromatic Imaging Camera).\n\nArgs:\n    collection: Collection type. Options: natural, enhanced.\n",
          "input_schema": {
            "properties": {
              "collection": {
                "default": "natural",
                "title": "Collection",
                "type": "string"
              }
            },
            "title": "get_epic_imageryArguments",
            "type": "object"
          }
        },
        "get_epic_imagery_by_date": {
          "name": "get_epic_imagery_by_date",
          "description": "Get images from the EPIC (Earth Polychromatic Imaging Camera) for a specific date.\n\nArgs:\n    date: Date in YYYY-MM-DD format.\n    collection: Collection type. Options: natural, enhanced.\n",
          "input_schema": {
            "properties": {
              "date": {
                "title": "Date",
                "type": "string"
              },
              "collection": {
                "default": "natural",
                "title": "Collection",
                "type": "string"
              }
            },
            "required": [
              "date"
            ],
            "title": "get_epic_imagery_by_dateArguments",
            "type": "object"
          }
        },
        "get_epic_dates": {
          "name": "get_epic_dates",
          "description": "Get available dates for EPIC images.\n\nArgs:\n    collection: Collection type. Options: natural, enhanced.\n",
          "input_schema": {
            "properties": {
              "collection": {
                "default": "natural",
                "title": "Collection",
                "type": "string"
              }
            },
            "title": "get_epic_datesArguments",
            "type": "object"
          }
        },
        "get_exoplanet_data": {
          "name": "get_exoplanet_data",
          "description": "Get data from NASA's Exoplanet Archive.\n\nArgs:\n    query: Specific query to filter results using Exoplanet Archive syntax. Example: \"pl_orbper > 300 and pl_rade < 2\"\n    table: Table to query. Common options: exoplanets (confirmed planets), cumulative (Kepler Objects of Interest), koi (subset of cumulative), tce (Threshold Crossing Events).\n    format: Output format. Options: json, csv, xml, ipac. Default: json.\n",
          "input_schema": {
            "properties": {
              "query": {
                "default": null,
                "title": "Query",
                "type": "string"
              },
              "table": {
                "default": "exoplanets",
                "title": "Table",
                "type": "string"
              },
              "format": {
                "default": "json",
                "title": "Format",
                "type": "string"
              }
            },
            "title": "get_exoplanet_dataArguments",
            "type": "object"
          }
        },
        "get_mars_rover_photos": {
          "name": "get_mars_rover_photos",
          "description": "Get photos from a Mars rover (Curiosity, Opportunity, Spirit).\nSpecify either sol (Martian day) or earth_date (YYYY-MM-DD), but not both.\n\nArgs:\n    rover_name: Name of the rover (curiosity, opportunity, spirit).\n    sol: Martian sol (day number, starting from landing). Use if not using earth_date.\n    earth_date: Earth date in YYYY-MM-DD format. Use if not using sol.\n    camera: Filter by camera abbreviation (e.g., FHAZ, RHAZ, MAST, NAVCAM, PANCAM). See documentation for full list per rover.\n    page: Page number for results (25 photos per page).\n",
          "input_schema": {
            "properties": {
              "rover_name": {
                "title": "Rover Name",
                "type": "string"
              },
              "sol": {
                "default": null,
                "title": "Sol",
                "type": "integer"
              },
              "earth_date": {
                "default": null,
                "title": "Earth Date",
                "type": "string"
              },
              "camera": {
                "default": null,
                "title": "Camera",
                "type": "string"
              },
              "page": {
                "default": 1,
                "title": "Page",
                "type": "integer"
              }
            },
            "required": [
              "rover_name"
            ],
            "title": "get_mars_rover_photosArguments",
            "type": "object"
          }
        },
        "get_mars_rover_manifest": {
          "name": "get_mars_rover_manifest",
          "description": "Get the mission manifest for a Mars rover (Curiosity, Opportunity, Spirit).\nProvides mission details like landing/launch dates, status, max sol/date, total photos, and photo counts per sol.\n\nArgs:\n    rover_name: Name of the rover (curiosity, opportunity, spirit).\n",
          "input_schema": {
            "properties": {
              "rover_name": {
                "title": "Rover Name",
                "type": "string"
              }
            },
            "required": [
              "rover_name"
            ],
            "title": "get_mars_rover_manifestArguments",
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "OKX Exchange": {
      "name": "OKX Exchange",
      "icon": "",
      "description": "",
      "command": [
        "node",
        "build/index.js"
      ],
      "connection_status": "success",
      "tools": {
        "get_price": {
          "name": "get_price",
          "description": "Get latest price for an OKX instrument",
          "input_schema": {
            "type": "object",
            "properties": {
              "instrument": {
                "type": "string",
                "description": "Instrument ID (e.g. BTC-USDT)"
              }
            },
            "required": [
              "instrument"
            ]
          }
        },
        "get_candlesticks": {
          "name": "get_candlesticks",
          "description": "Get candlestick data for an OKX instrument",
          "input_schema": {
            "type": "object",
            "properties": {
              "instrument": {
                "type": "string",
                "description": "Instrument ID (e.g. BTC-USDT)"
              },
              "bar": {
                "type": "string",
                "description": "Time interval (e.g. 1m, 5m, 1H, 1D)",
                "default": "1m"
              },
              "limit": {
                "type": "number",
                "description": "Number of candlesticks (max 100)",
                "default": 100
              }
            },
            "required": [
              "instrument"
            ]
          }
        }
      },
      "attempts": 1
    },
    "Paper Search": {
      "name": "Paper Search",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "-m",
        "paper_search_mcp.server"
      ],
      "connection_status": "success",
      "tools": {
        "search_arxiv": {
          "name": "search_arxiv",
          "description": "Search academic papers from arXiv.\n\nArgs:\n    query: Search query string (e.g., 'machine learning').\n    max_results: Maximum number of papers to return (default: 10).\nReturns:\n    List of paper metadata in dictionary format.",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "max_results": {
                "default": 10,
                "title": "Max Results",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "type": "object"
          }
        },
        "search_pubmed": {
          "name": "search_pubmed",
          "description": "Search academic papers from PubMed.\n\nArgs:\n    query: Search query string (e.g., 'machine learning').\n    max_results: Maximum number of papers to return (default: 10).\nReturns:\n    List of paper metadata in dictionary format.",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "max_results": {
                "default": 10,
                "title": "Max Results",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "type": "object"
          }
        },
        "search_biorxiv": {
          "name": "search_biorxiv",
          "description": "Search academic papers from bioRxiv.\n\nArgs:\n    query: Search query string (e.g., 'machine learning').\n    max_results: Maximum number of papers to return (default: 10).\nReturns:\n    List of paper metadata in dictionary format.",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "max_results": {
                "default": 10,
                "title": "Max Results",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "type": "object"
          }
        },
        "search_medrxiv": {
          "name": "search_medrxiv",
          "description": "Search academic papers from medRxiv.\n\nArgs:\n    query: Search query string (e.g., 'machine learning').\n    max_results: Maximum number of papers to return (default: 10).\nReturns:\n    List of paper metadata in dictionary format.",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "max_results": {
                "default": 10,
                "title": "Max Results",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "type": "object"
          }
        },
        "search_google_scholar": {
          "name": "search_google_scholar",
          "description": "Search academic papers from Google Scholar.\n\nArgs:\n    query: Search query string (e.g., 'machine learning').\n    max_results: Maximum number of papers to return (default: 10).\nReturns:\n    List of paper metadata in dictionary format.",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "max_results": {
                "default": 10,
                "title": "Max Results",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "type": "object"
          }
        },
        "search_iacr": {
          "name": "search_iacr",
          "description": "Search academic papers from IACR ePrint Archive.\n\nArgs:\n    query: Search query string (e.g., 'cryptography', 'secret sharing').\n    max_results: Maximum number of papers to return (default: 10).\n    fetch_details: Whether to fetch detailed information for each paper (default: True).\nReturns:\n    List of paper metadata in dictionary format.",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "max_results": {
                "default": 10,
                "title": "Max Results",
                "type": "integer"
              },
              "fetch_details": {
                "default": true,
                "title": "Fetch Details",
                "type": "boolean"
              }
            },
            "required": [
              "query"
            ],
            "type": "object"
          }
        },
        "download_arxiv": {
          "name": "download_arxiv",
          "description": "Download PDF of an arXiv paper.\n\nArgs:\n    paper_id: arXiv paper ID (e.g., '2106.12345').\n    save_path: Directory to save the PDF (default: './downloads').\nReturns:\n    Path to the downloaded PDF file.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        },
        "download_pubmed": {
          "name": "download_pubmed",
          "description": "Attempt to download PDF of a PubMed paper.\n\nArgs:\n    paper_id: PubMed ID (PMID).\n    save_path: Directory to save the PDF (default: './downloads').\nReturns:\n    str: Message indicating that direct PDF download is not supported.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        },
        "download_biorxiv": {
          "name": "download_biorxiv",
          "description": "Download PDF of a bioRxiv paper.\n\nArgs:\n    paper_id: bioRxiv DOI.\n    save_path: Directory to save the PDF (default: './downloads').\nReturns:\n    Path to the downloaded PDF file.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        },
        "download_medrxiv": {
          "name": "download_medrxiv",
          "description": "Download PDF of a medRxiv paper.\n\nArgs:\n    paper_id: medRxiv DOI.\n    save_path: Directory to save the PDF (default: './downloads').\nReturns:\n    Path to the downloaded PDF file.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        },
        "download_iacr": {
          "name": "download_iacr",
          "description": "Download PDF of an IACR ePrint paper.\n\nArgs:\n    paper_id: IACR paper ID (e.g., '2009/101').\n    save_path: Directory to save the PDF (default: './downloads').\nReturns:\n    Path to the downloaded PDF file.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        },
        "read_arxiv_paper": {
          "name": "read_arxiv_paper",
          "description": "Read and extract text content from an arXiv paper PDF.\n\nArgs:\n    paper_id: arXiv paper ID (e.g., '2106.12345').\n    save_path: Directory where the PDF is/will be saved (default: './downloads').\nReturns:\n    str: The extracted text content of the paper.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        },
        "read_pubmed_paper": {
          "name": "read_pubmed_paper",
          "description": "Read and extract text content from a PubMed paper.\n\nArgs:\n    paper_id: PubMed ID (PMID).\n    save_path: Directory where the PDF would be saved (unused).\nReturns:\n    str: Message indicating that direct paper reading is not supported.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        },
        "read_biorxiv_paper": {
          "name": "read_biorxiv_paper",
          "description": "Read and extract text content from a bioRxiv paper PDF.\n\nArgs:\n    paper_id: bioRxiv DOI.\n    save_path: Directory where the PDF is/will be saved (default: './downloads').\nReturns:\n    str: The extracted text content of the paper.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        },
        "read_medrxiv_paper": {
          "name": "read_medrxiv_paper",
          "description": "Read and extract text content from a medRxiv paper PDF.\n\nArgs:\n    paper_id: medRxiv DOI.\n    save_path: Directory where the PDF is/will be saved (default: './downloads').\nReturns:\n    str: The extracted text content of the paper.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        },
        "read_iacr_paper": {
          "name": "read_iacr_paper",
          "description": "Read and extract text content from an IACR ePrint paper PDF.\n\nArgs:\n    paper_id: IACR paper ID (e.g., '2009/101').\n    save_path: Directory where the PDF is/will be saved (default: './downloads').\nReturns:\n    str: The extracted text content of the paper.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        },
        "search_semantic": {
          "name": "search_semantic",
          "description": "Search academic papers from Semantic Scholar.\n\nArgs:\n    query: Search query string (e.g., 'machine learning').\n    year: Optional year filter (e.g., '2019', '2016-2020', '2010-', '-2015').\n    max_results: Maximum number of papers to return (default: 10).\nReturns:\n    List of paper metadata in dictionary format.",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              },
              "year": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Year"
              },
              "max_results": {
                "default": 10,
                "title": "Max Results",
                "type": "integer"
              }
            },
            "required": [
              "query"
            ],
            "type": "object"
          }
        },
        "download_semantic": {
          "name": "download_semantic",
          "description": "Download PDF of a Semantic Scholar paper.    \n\nArgs:\n    paper_id: Semantic Scholar paper ID, Paper identifier in one of the following formats:\n        - Semantic Scholar ID (e.g., \"649def34f8be52c8b66281af98ae884c09aef38b\")\n        - DOI:<doi> (e.g., \"DOI:10.18653/v1/N18-3011\")\n        - ARXIV:<id> (e.g., \"ARXIV:2106.15928\")\n        - MAG:<id> (e.g., \"MAG:112218234\")\n        - ACL:<id> (e.g., \"ACL:W12-3903\")\n        - PMID:<id> (e.g., \"PMID:19872477\")\n        - PMCID:<id> (e.g., \"PMCID:2323736\")\n        - URL:<url> (e.g., \"URL:https://arxiv.org/abs/2106.15928v1\")\n    save_path: Directory to save the PDF (default: './downloads').\nReturns:\n    Path to the downloaded PDF file.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        },
        "read_semantic_paper": {
          "name": "read_semantic_paper",
          "description": "Read and extract text content from a Semantic Scholar paper. \n\nArgs:\n    paper_id: Semantic Scholar paper ID, Paper identifier in one of the following formats:\n        - Semantic Scholar ID (e.g., \"649def34f8be52c8b66281af98ae884c09aef38b\")\n        - DOI:<doi> (e.g., \"DOI:10.18653/v1/N18-3011\")\n        - ARXIV:<id> (e.g., \"ARXIV:2106.15928\")\n        - MAG:<id> (e.g., \"MAG:112218234\")\n        - ACL:<id> (e.g., \"ACL:W12-3903\")\n        - PMID:<id> (e.g., \"PMID:19872477\")\n        - PMCID:<id> (e.g., \"PMCID:2323736\")\n        - URL:<url> (e.g., \"URL:https://arxiv.org/abs/2106.15928v1\")\n    save_path: Directory where the PDF is/will be saved (default: './downloads').\nReturns:\n    str: The extracted text content of the paper.",
          "input_schema": {
            "properties": {
              "paper_id": {
                "title": "Paper Id",
                "type": "string"
              },
              "save_path": {
                "default": "./downloads",
                "title": "Save Path",
                "type": "string"
              }
            },
            "required": [
              "paper_id"
            ],
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Scientific Computing": {
      "name": "Scientific Computing",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "src/server.py"
      ],
      "connection_status": "success",
      "tools": {
        "create_tensor": {
          "name": "create_tensor",
          "description": "\n    Creates a NumPy array (matrix) with a specified shape and values.\n\n    Args:\n        shape (list[int]): The shape of the resulting array as a tuple(e.g., (2, 3)).\n        values (list[float]): A flat list of values to populate the array.\n        name (str): The name of the tensor to be stored.\n\n    Returns:\n        np.ndarray: A NumPy array with the specified shape.\n\n    Raises:\n        ValueError: If the number of values does not match the product of the shape.\n    ",
          "input_schema": {
            "properties": {
              "shape": {
                "description": "Tensor shape as list of integers",
                "items": {
                  "type": "integer"
                },
                "minItems": 1,
                "title": "Shape",
                "type": "array"
              },
              "values": {
                "description": "Flat list of floats to fill the tensor",
                "items": {
                  "type": "number"
                },
                "minItems": 1,
                "title": "Values",
                "type": "array"
              },
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "shape",
              "values",
              "name"
            ],
            "title": "create_tensorArguments",
            "type": "object"
          }
        },
        "view_tensor": {
          "name": "view_tensor",
          "description": "\n    Returns an immutable view of a previously stored NumPy tensor from the in-memory tensor store.\n\n    Args:\n        name (str): The name of the tensor as stored in the in-store dictionary\n    Returns:\n        dict: The in-store dictionary for tensors\n\n    ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "view_tensorArguments",
            "type": "object"
          }
        },
        "delete_tensor": {
          "name": "delete_tensor",
          "description": "\n    Deletes a tensor from the in-memory tensor store.\n\n    Args:\n        name (str): The name of the tensor to delete.\n\n    Raises:\n        ValueError: If the tensor name is not found in the store or if an error occurs during deletion.\n    ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "delete_tensorArguments",
            "type": "object"
          }
        },
        "add_matrices": {
          "name": "add_matrices",
          "description": "\n        Adds two stored tensors element-wise.\n\n        Args:\n            name_a (str): The name of the first tensor.\n            name_b (str): The name of the second tensor.\n\n        Returns:\n            np.ndarray: The result of element-wise addition.\n\n        Raises:\n            ValueError: If the tensor names are not found or shapes are incompatible.\n        ",
          "input_schema": {
            "properties": {
              "name_a": {
                "title": "Name A",
                "type": "string"
              },
              "name_b": {
                "title": "Name B",
                "type": "string"
              }
            },
            "required": [
              "name_a",
              "name_b"
            ],
            "title": "add_matricesArguments",
            "type": "object"
          }
        },
        "subtract_matrices": {
          "name": "subtract_matrices",
          "description": "\n        Adds two stored tensors element-wise.\n\n        Args:\n            name_a (str): The name of the first tensor.\n            name_b (str): The name of the second tensor.\n\n        Returns:\n            np.ndarray: The result of element-wise subtraction.\n\n        Raises:\n            ValueError: If the tensor names are not found or shapes are incompatible.\n        ",
          "input_schema": {
            "properties": {
              "name_a": {
                "title": "Name A",
                "type": "string"
              },
              "name_b": {
                "title": "Name B",
                "type": "string"
              }
            },
            "required": [
              "name_a",
              "name_b"
            ],
            "title": "subtract_matricesArguments",
            "type": "object"
          }
        },
        "multiply_matrices": {
          "name": "multiply_matrices",
          "description": "\n        Performs matrix multiplication between two stored tensors.\n\n        Args:\n            name_a (str): The name of the first tensor.\n            name_b (str): The name of the second tensor.\n\n        Returns:\n            np.ndarray: The result of matrix multiplication.\n\n        Raises:\n            ValueError: If either tensor is not found or their shapes are incompatible.\n        ",
          "input_schema": {
            "properties": {
              "name_a": {
                "title": "Name A",
                "type": "string"
              },
              "name_b": {
                "title": "Name B",
                "type": "string"
              }
            },
            "required": [
              "name_a",
              "name_b"
            ],
            "title": "multiply_matricesArguments",
            "type": "object"
          }
        },
        "scale_matrix": {
          "name": "scale_matrix",
          "description": "\n        Scales a stored tensor by a scalar factor.\n\n        Args:\n            name (str): The name of the tensor to scale.\n            scale_factor (float): The scalar value to multiply the tensor by.\n            in_place (bool): If True, updates the stored tensor; otherwise, returns a new scaled tensor.\n\n        Returns:\n            np.ndarray: The scaled tensor.\n\n        Raises:\n            ValueError: If the tensor name is not found in the store.\n        ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              },
              "scale_factor": {
                "title": "Scale Factor",
                "type": "number"
              },
              "in_place": {
                "default": true,
                "title": "In Place",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "scale_factor"
            ],
            "title": "scale_matrixArguments",
            "type": "object"
          }
        },
        "matrix_inverse": {
          "name": "matrix_inverse",
          "description": "\n        Computes the inverse of a stored square matrix.\n\n        Args:\n            name (str): The name of the tensor to invert.\n\n        Returns:\n            np.ndarray: The inverse of the matrix.\n\n        Raises:\n            ValueError: If the matrix is not found, is not square, or is singular (non-invertible).\n        ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "matrix_inverseArguments",
            "type": "object"
          }
        },
        "transpose": {
          "name": "transpose",
          "description": "\n        Computes the transpose of a stored tensor.\n\n        Args:\n            name (str): The name of the tensor to transpose.\n\n        Returns:\n            np.ndarray: The transposed tensor.\n\n        Raises:\n            ValueError: If the tensor name is not found in the store.\n        ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "transposeArguments",
            "type": "object"
          }
        },
        "determinant": {
          "name": "determinant",
          "description": "\n        Computes the determinant of a stored square matrix.\n\n        Args:\n            name (str): The name of the matrix.\n\n        Returns:\n            float: The determinant of the matrix.\n\n        Raises:\n            ValueError: If the matrix is not found or is not square.\n        ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "determinantArguments",
            "type": "object"
          }
        },
        "rank": {
          "name": "rank",
          "description": "\n        Computes the rank of a stored tensor.\n\n        Args:\n            name (str): The name of the tensor.\n\n        Returns:\n            int | list[int]: The rank of the matrix.\n\n        Raises:\n            ValueError: If the tensor name is not found in the store.\n        ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "rankArguments",
            "type": "object"
          }
        },
        "compute_eigen": {
          "name": "compute_eigen",
          "description": "\n        Computes the eigenvalues and right eigenvectors of a stored square matrix.\n\n        Args:\n            name (str): The name of the tensor to analyze.\n\n        Returns:\n            dict: A dictionary with keys:\n                - 'eigenvalues': np.ndarray\n                - 'eigenvectors': np.ndarray\n\n        Raises:\n            ValueError: If the tensor is not found or is not a square matrix.\n        ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "compute_eigenArguments",
            "type": "object"
          }
        },
        "qr_decompose": {
          "name": "qr_decompose",
          "description": "\n        Computes the QR decomposition of a stored matrix.\n\n        Decomposes the matrix A into A = Q @ R, where Q is an orthogonal matrix\n        and R is an upper triangular matrix.\n\n        Args:\n            name (str): The name of the matrix to decompose.\n\n        Returns:\n            dict: A dictionary with keys:\n                - 'q': np.ndarray, the orthogonal matrix Q\n                - 'r': np.ndarray, the upper triangular matrix R\n\n        Raises:\n            ValueError: If the matrix is not found or decomposition fails.\n        ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "qr_decomposeArguments",
            "type": "object"
          }
        },
        "svd_decompose": {
          "name": "svd_decompose",
          "description": "\n        Computes the Singular Value Decomposition (SVD) of a stored matrix.\n\n        Decomposes the matrix A into A = U @ S @ V^T, where U and V^T are orthogonal\n        matrices, and S is a diagonal matrix of singular values.\n\n        Args:\n            name (str): The name of the matrix to decompose.\n\n        Returns:\n            dict: A dictionary with keys:\n                - 'u': np.ndarray, the left singular vectors\n                - 's': np.ndarray, the singular values\n                - 'v_t': np.ndarray, the right singular vectors transposed\n\n        Raises:\n            ValueError: If the matrix is not found or decomposition fails.\n        ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "svd_decomposeArguments",
            "type": "object"
          }
        },
        "find_orthonormal_basis": {
          "name": "find_orthonormal_basis",
          "description": "\n        Finds an orthonormal basis for the column space of a stored matrix using QR decomposition.\n\n        Args:\n            name (str): The name of the matrix.\n\n        Returns:\n            list[list[float]]: A list of orthonormal basis vectors.\n\n        Raises:\n            ValueError: If the matrix is not found or decomposition fails.\n        ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "find_orthonormal_basisArguments",
            "type": "object"
          }
        },
        "change_basis": {
          "name": "change_basis",
          "description": "\n        Changes the basis of a stored square matrix.\n\n        Args:\n            name (str): Name of the matrix in the tensor store.\n            new_basis (list[list[float]]): Columns are new basis vectors.\n\n        Returns:\n            np.ndarray: Representation of the matrix in the new basis.\n\n        Raises:\n            ValueError: If the matrix name is not found or non-invertible.\n        ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              },
              "new_basis": {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "title": "New Basis",
                "type": "array"
              }
            },
            "required": [
              "name",
              "new_basis"
            ],
            "title": "change_basisArguments",
            "type": "object"
          }
        },
        "vector_project": {
          "name": "vector_project",
          "description": "\n        Projects a stored vector onto another vector.\n\n        Args:\n            name (str): Name of the stored vector to project.\n            new_vector (list[float]): The vector to project onto.\n\n        Returns:\n            np.ndarray: The projection result vector.\n\n        Raises:\n            ValueError: If the vector name is not found or projection fails.\n        ",
          "input_schema": {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              },
              "new_vector": {
                "items": {
                  "type": "number"
                },
                "title": "New Vector",
                "type": "array"
              }
            },
            "required": [
              "name",
              "new_vector"
            ],
            "title": "vector_projectArguments",
            "type": "object"
          }
        },
        "vector_dot_product": {
          "name": "vector_dot_product",
          "description": "\n        Computes the dot product between two stored vectors.\n\n        Args:\n            name_a (str): Name of the first vector in the tensor store.\n            name_b (str): Name of the second vector in the tensor store.\n\n        Returns:\n            np.ndarray: Scalar result of the dot product.\n\n        Raises:\n            ValueError: If either vector is not found or if the dot product computation fails.\n        ",
          "input_schema": {
            "properties": {
              "name_a": {
                "title": "Name A",
                "type": "string"
              },
              "name_b": {
                "title": "Name B",
                "type": "string"
              }
            },
            "required": [
              "name_a",
              "name_b"
            ],
            "title": "vector_dot_productArguments",
            "type": "object"
          }
        },
        "vector_cross_product": {
          "name": "vector_cross_product",
          "description": "\n        Computes the cross product of two stored vectors.\n\n        Args:\n            name_a (str): Name of the first vector in the tensor store.\n            name_b (str): Name of the second vector in the tensor store.\n\n        Returns:\n            np.ndarray: Vector result of the cross product.\n\n        Raises:\n            ValueError: If either vector is not found or if the cross product computation fails.\n        ",
          "input_schema": {
            "properties": {
              "name_a": {
                "title": "Name A",
                "type": "string"
              },
              "name_b": {
                "title": "Name B",
                "type": "string"
              }
            },
            "required": [
              "name_a",
              "name_b"
            ],
            "title": "vector_cross_productArguments",
            "type": "object"
          }
        },
        "gradient": {
          "name": "gradient",
          "description": "\n        Computes the symbolic gradient of a scalar function.\n\n        Args:\n            f_str (str): A string representing a scalar function (e.g., \"x**2 + y*z\").\n\n        Returns:\n            str: A string representation of the symbolic gradient as a vector.\n        ",
          "input_schema": {
            "properties": {
              "f_str": {
                "title": "F Str",
                "type": "string"
              }
            },
            "required": [
              "f_str"
            ],
            "title": "gradientArguments",
            "type": "object"
          }
        },
        "curl": {
          "name": "curl",
          "description": "\n        Computes the symbolic curl of a vector field, optionally evaluated at a point.\n\n        Args:\n            f_str (str): A string representing the vector field in list format (e.g., \"[x+y, x, 2*z]\").\n            point (list[float], optional): A list of coordinates [x, y, z] to evaluate the curl numerically.\n\n        Returns:\n            dict: A dictionary with the symbolic curl as a string, and optionally the evaluated vector.\n        ",
          "input_schema": {
            "properties": {
              "f_str": {
                "title": "F Str",
                "type": "string"
              },
              "point": {
                "default": null,
                "items": {
                  "type": "number"
                },
                "title": "Point",
                "type": "array"
              }
            },
            "required": [
              "f_str"
            ],
            "title": "curlArguments",
            "type": "object"
          }
        },
        "divergence": {
          "name": "divergence",
          "description": "\n        Computes the symbolic divergence of a vector field, optionally evaluated at a point.\n\n        Args:\n            f_str (str): A string representing the vector field in list format (e.g., \"[x+y, x, 2*z]\").\n            point (list[float], optional): A list of coordinates [x, y, z] to evaluate the divergence numerically.\n\n        Returns:\n            dict: A dictionary with the symbolic divergence as a string, and optionally the evaluated scalar.\n        ",
          "input_schema": {
            "properties": {
              "f_str": {
                "title": "F Str",
                "type": "string"
              },
              "point": {
                "default": null,
                "items": {
                  "type": "number"
                },
                "title": "Point",
                "type": "array"
              }
            },
            "required": [
              "f_str"
            ],
            "title": "divergenceArguments",
            "type": "object"
          }
        },
        "laplacian": {
          "name": "laplacian",
          "description": "\n        Computes the Laplacian of a scalar or vector field symbolically.\n\n        Args:\n            f_str (str): Scalar function as \"x**2 + y*z\" or vector \"[Fx, Fy, Fz]\".\n            is_vector (bool): Set True to compute vector Laplacian.\n\n        Returns:\n            str: Symbolic result of the Laplacian—scalar or list of 3 components.\n        ",
          "input_schema": {
            "properties": {
              "f_str": {
                "title": "F Str",
                "type": "string"
              },
              "is_vector": {
                "default": false,
                "title": "Is Vector",
                "type": "boolean"
              }
            },
            "required": [
              "f_str"
            ],
            "title": "laplacianArguments",
            "type": "object"
          }
        },
        "directional_deriv": {
          "name": "directional_deriv",
          "description": "\n        Computes symbolic directional derivative of scalar field along a vector direction.\n\n        Args: f_str (str): Expression like \"x*y*z\". u (list[float]): Direction vector [vx, vy, vz]. unit (bool): True\n        if u should be normalized before calculating directional derivative. Set to True by default.\n\n        Returns:\n            str: Symbolic result as string.\n        ",
          "input_schema": {
            "properties": {
              "f_str": {
                "title": "F Str",
                "type": "string"
              },
              "u": {
                "items": {
                  "type": "number"
                },
                "title": "U",
                "type": "array"
              },
              "unit": {
                "default": true,
                "title": "Unit",
                "type": "boolean"
              }
            },
            "required": [
              "f_str",
              "u"
            ],
            "title": "directional_derivArguments",
            "type": "object"
          }
        },
        "plot_vector_field": {
          "name": "plot_vector_field",
          "description": "\n        Plots a 3D vector field from a string \"[u(x,y,z), v(x,y,z), w(x,y,z)]\"\n\n        Args:\n            f_str: string representation of 3D field, e.g. \"[z, -y, x]\".\n            bounds: (xmin, xmax, ymin, ymax, zmin, zmax)\n            n: grid resolution per axis\n\n        Returns: Displayed Matplotlib 3D quiver plot (no image return needed)\n        ",
          "input_schema": {
            "properties": {
              "f_str": {
                "title": "F Str",
                "type": "string"
              },
              "bounds": {
                "default": [
                  -1,
                  1,
                  -1,
                  1,
                  -1,
                  1
                ],
                "title": "bounds",
                "type": "string"
              },
              "n": {
                "default": 10,
                "title": "N",
                "type": "integer"
              }
            },
            "required": [
              "f_str"
            ],
            "title": "plot_vector_fieldArguments",
            "type": "object"
          }
        },
        "plot_function": {
          "name": "plot_function",
          "description": "\n        Plots a 2D or 3D mathematical function from a symbolic expression string.\n\n        Args:\n            expr_str: string representation of a function in x or x and y,\n                      e.g. \"x**2\" or \"sin(sqrt(x**2 + y**2))\"\n            xlim: (xmin, xmax) range for x-axis\n            ylim: (ymin, ymax) range for y-axis (used in 2D or 3D)\n            grid: resolution of the plot grid\n\n        Returns:\n            A rendered Image of the function using Matplotlib.\n            - 2D plot if the expression contains only x\n            - 3D surface plot if the expression contains both x and y\n        ",
          "input_schema": {
            "properties": {
              "expr_str": {
                "title": "Expr Str",
                "type": "string"
              },
              "xlim": {
                "default": [
                  -5,
                  5
                ],
                "maxItems": 2,
                "minItems": 2,
                "prefixItems": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "integer"
                  }
                ],
                "title": "Xlim",
                "type": "array"
              },
              "ylim": {
                "default": [
                  -5,
                  5
                ],
                "maxItems": 2,
                "minItems": 2,
                "prefixItems": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "integer"
                  }
                ],
                "title": "Ylim",
                "type": "array"
              },
              "grid": {
                "default": 200,
                "title": "grid",
                "type": "string"
              }
            },
            "required": [
              "expr_str"
            ],
            "title": "plot_functionArguments",
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Weather Data": {
      "name": "Weather Data",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "server.py"
      ],
      "connection_status": "success",
      "tools": {
        "get_current_weather_tool": {
          "name": "get_current_weather_tool",
          "description": "\n    Get current weather information for a specific city.\n\n    Args:\n        city: Name of the city to get weather for\n\n    Returns:\n        Current weather data including temperature, conditions, humidity, wind, etc.\n    ",
          "input_schema": {
            "properties": {
              "city": {
                "title": "City",
                "type": "string"
              }
            },
            "required": [
              "city"
            ],
            "title": "get_current_weather_toolArguments",
            "type": "object"
          }
        },
        "get_weather_forecast_tool": {
          "name": "get_weather_forecast_tool",
          "description": "\n    Get weather forecast for a specific city.\n\n    Args:\n        city: Name of the city to get forecast for\n        days: Number of days to forecast (1-10, default: 3)\n\n    Returns:\n        Weather forecast data for the specified number of days\n    ",
          "input_schema": {
            "properties": {
              "city": {
                "title": "City",
                "type": "string"
              },
              "days": {
                "default": 3,
                "title": "Days",
                "type": "integer"
              }
            },
            "required": [
              "city"
            ],
            "title": "get_weather_forecast_toolArguments",
            "type": "object"
          }
        },
        "search_locations_tool": {
          "name": "search_locations_tool",
          "description": "\n    Search for locations by name.\n\n    Args:\n        query: Location name or partial name to search for\n\n    Returns:\n        List of matching locations with their details\n    ",
          "input_schema": {
            "properties": {
              "query": {
                "title": "Query",
                "type": "string"
              }
            },
            "required": [
              "query"
            ],
            "title": "search_locations_toolArguments",
            "type": "object"
          }
        },
        "get_live_temp": {
          "name": "get_live_temp",
          "description": "\n    Legacy tool: Get current temperature for a city (for backward compatibility).\n    Use get_current_weather_tool for more detailed information.\n    ",
          "input_schema": {
            "properties": {
              "city": {
                "title": "City",
                "type": "string"
              }
            },
            "required": [
              "city"
            ],
            "title": "get_live_tempArguments",
            "type": "object"
          }
        }
      },
      "attempts": 1
    },
    "Time MCP": {
      "name": "Time MCP",
      "icon": "",
      "description": "",
      "command": [
        "python",
        "-m",
        "mcp_server_time"
      ],
      "connection_status": "success",
      "tools": {
        "get_current_time": {
          "name": "get_current_time",
          "description": "Get current time in a specific timezones",
          "input_schema": {
            "type": "object",
            "properties": {
              "timezone": {
                "type": "string",
                "description": "IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'Asia/Shanghai' as local timezone if no timezone provided by the user."
              }
            },
            "required": [
              "timezone"
            ]
          }
        },
        "convert_time": {
          "name": "convert_time",
          "description": "Convert time between timezones",
          "input_schema": {
            "type": "object",
            "properties": {
              "source_timezone": {
                "type": "string",
                "description": "Source IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'Asia/Shanghai' as local timezone if no source timezone provided by the user."
              },
              "time": {
                "type": "string",
                "description": "Time to convert in 24-hour format (HH:MM)"
              },
              "target_timezone": {
                "type": "string",
                "description": "Target IANA timezone name (e.g., 'Asia/Tokyo', 'America/San_Francisco'). Use 'Asia/Shanghai' as local timezone if no target timezone provided by the user."
              }
            },
            "required": [
              "source_timezone",
              "time",
              "target_timezone"
            ]
          }
        }
      },
      "attempts": 1
    }
  }
}